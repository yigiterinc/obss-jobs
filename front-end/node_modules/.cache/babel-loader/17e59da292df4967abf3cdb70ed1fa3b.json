{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Tables/Datatable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Tables/Datatable.vue","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Tbl from \"./Table\";\nimport TblHead from \"./TableHead\";\nimport TblBody from \"./TableBody\";\nimport Pagination from \"../Components/Pagination\";\nimport PageItem from \"../Components/PageItem\";\nimport mdbInput from \"../Forms/Input\";\nimport DatatableSelect from \"./DatatableSelect\";\nimport DatatableSearch from \"./DatatableSearch\";\nimport mdbIcon from \"../Content/Fa\";\nimport mdbRow from \"../Layout/Row\";\nimport mdbCol from \"../Layout/Col\";\nimport mdbBtn from \"../Components/Button\";\nvar Datatable = {\n  name: 'Datatable',\n  props: {\n    data: {\n      type: [Object, String],\n      default: function _default() {\n        return {\n          columns: [],\n          rows: []\n        };\n      }\n    },\n    autoWidth: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    borderless: {\n      type: Boolean,\n      default: false\n    },\n    dark: {\n      type: Boolean,\n      default: false\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    headerColor: {\n      type: String\n    },\n    headerWhite: {\n      type: Boolean,\n      default: false\n    },\n    hover: {\n      type: Boolean,\n      default: false\n    },\n    materialInputs: {\n      type: Boolean,\n      default: false\n    },\n    maxWidth: {\n      type: String\n    },\n    maxHeight: {\n      type: String\n    },\n    order: {\n      type: Array\n    },\n    pagination: {\n      type: Boolean,\n      default: true\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    responsiveSm: {\n      type: Boolean,\n      default: false\n    },\n    responsiveMd: {\n      type: Boolean,\n      default: false\n    },\n    responsiveLg: {\n      type: Boolean,\n      default: false\n    },\n    responsiveXl: {\n      type: Boolean,\n      default: false\n    },\n    scrollY: {\n      type: Boolean,\n      defautl: false\n    },\n    searching: {\n      type: Boolean,\n      default: true\n    },\n    sorting: {\n      type: Boolean,\n      default: true\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    start: {\n      type: String,\n      default: 'Start'\n    },\n    end: {\n      type: String,\n      default: 'End'\n    },\n    next: {\n      type: String,\n      default: 'Next'\n    },\n    previous: {\n      type: String,\n      default: 'Previos'\n    },\n    arrows: {\n      type: Boolean,\n      default: false\n    },\n    display: {\n      type: Number,\n      default: 5\n    },\n    defaultRow: {\n      type: String,\n      default: '-'\n    },\n    defaultCol: {\n      type: String,\n      default: 'undefined'\n    },\n    tfoot: {\n      type: Boolean,\n      default: true\n    },\n    reactive: {\n      type: Boolean,\n      default: false\n    },\n    refresh: {\n      type: Boolean,\n      default: false\n    },\n    time: {\n      type: Number,\n      default: 5000\n    }\n  },\n  data: function data() {\n    return {\n      updatedKey: null,\n      reactiveFlag: false,\n      recentSort: null,\n      interval: null,\n      rows: this.data.rows || [],\n      columns: this.data.columns || [],\n      options: [10, 25, 50, 100],\n      entries: 10,\n      pages: [],\n      activePage: 0,\n      search: '',\n      tableProps: {\n        autoWidth: this.autoWidth,\n        bordered: this.bordered,\n        borderless: this.borderless,\n        dark: this.dark,\n        fixed: this.fixed,\n        hover: this.hover,\n        responsive: this.responsive,\n        responsiveSm: this.responsiveSm,\n        responsiveMd: this.responsiveMd,\n        responsiveLg: this.responsiveLg,\n        responsiveXl: this.responsiveXl,\n        striped: this.striped,\n        dtScrollY: this.scrollY,\n        maxHeight: this.maxHeight\n      },\n      wrapperStyle: {\n        maxWidth: this.maxWidth ? this.maxWidth : '100%',\n        margin: '0 auto'\n      }\n    };\n  },\n  components: {\n    DatatableSearch: DatatableSearch,\n    DatatableSelect: DatatableSelect,\n    Tbl: Tbl,\n    TblHead: TblHead,\n    TblBody: TblBody,\n    Pagination: Pagination,\n    PageItem: PageItem,\n    mdbInput: mdbInput,\n    mdbIcon: mdbIcon,\n    mdbRow: mdbRow,\n    mdbCol: mdbCol,\n    mdbBtn: mdbBtn\n  },\n  computed: {\n    rowsDisplay: function rowsDisplay() {\n      return this.formatRows();\n    },\n    // filter objects by parameters match\n    filteredRows: function filteredRows() {\n      var _this = this;\n\n      return this.rowsDisplay.filter(function (row) {\n        return row.filter(function (value) {\n          return value.toString().toLowerCase().match(_this.search.toLowerCase());\n        }).length > 0;\n      });\n    },\n    visiblePages: function visiblePages() {\n      var start = this.activePage - Math.floor(this.display / 2) > 0 ? this.activePage - Math.floor(this.display / 2) : 0;\n      var end = start + this.display < this.pages.length ? start + this.display : this.pages.length;\n\n      if (end - start < this.display && end - this.display >= 0) {\n        start = end - this.display;\n      }\n\n      ;\n      return this.pages.slice(start, end);\n    },\n    componentKey: function componentKey() {\n      return this.updatedKey;\n    }\n  },\n  methods: {\n    changePage: function changePage(index) {\n      this.activePage = index;\n    },\n    sort: function sort(field, _sort) {\n      this.recentSort = {\n        field: field,\n        sort: _sort\n      };\n\n      if (this.sorting) {\n        _sort === 'asc' ? this.rows.sort(function (a, b) {\n          return a[field] > b[field] ? 1 : -1;\n        }) : this.rows.sort(function (a, b) {\n          return a[field] > b[field] ? -1 : 1;\n        });\n        this.columns[this.columns.findIndex(function (column) {\n          return column.field === field;\n        })].sort = _sort === 'asc' ? 'desc' : 'asc';\n      }\n    },\n    updateEntries: function updateEntries(value) {\n      this.entries = value;\n    },\n    updateSearch: function updateSearch(value) {\n      this.search = this.escapeRegExp(value);\n      this.activePage = 0;\n    },\n    escapeRegExp: function escapeRegExp(string) {\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    },\n    setDefaultColumns: function setDefaultColumns() {\n      var _this2 = this;\n\n      this.columns.forEach(function (col, i) {\n        if (!col) {\n          _this2.columns[i] = {\n            label: _this2.defaultCol,\n            field: _this2.defaultCol.concat(i),\n            sort: 'asc'\n          };\n        }\n      });\n    },\n    formatRows: function formatRows() {\n      var _this3 = this;\n\n      this.setDefaultColumns();\n      var arrRows = [];\n      var headers = this.columns.map(function (col) {\n        return col.field;\n      });\n      this.rows.map(function (row) {\n        var newRow = [];\n        headers.forEach(function (header) {\n          var content = row[header] || _this3.defaultRow;\n          newRow.push(content);\n        });\n        arrRows.push(newRow);\n      });\n      return arrRows;\n    },\n    fetchData: function fetchData() {\n      var _this4 = this;\n\n      fetch(this.data).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        _this4.columns = json.columns;\n        _this4.rows = json.rows;\n\n        _this4.$emit('fields', _this4.columns);\n      }).then(function (data) {\n        if (_this4.recentSort) {\n          _this4.sort(_this4.recentSort.field, _this4.recentSort.sort);\n        }\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    },\n    updateData: function updateData() {\n      this.fetchData();\n      this.reactiveFlag = true;\n      this.updatedKey = Math.floor(Math.random() * 100000000);\n    }\n  },\n  mounted: function mounted() {\n    // bind data or download form API\n    if (typeof this.data === 'string') {\n      this.fetchData();\n    } //reactivness in data table\n\n\n    if (this.reactive) {\n      this.interval = setInterval(this.updateData, this.time);\n    } // findout rows amount, and slice it into array (split into pages)\n\n\n    var pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n    this.pages = [];\n\n    if (this.pagination) {\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * this.entries;\n        this.pages.push(this.filteredRows.slice(pageEndIndex - this.entries, pageEndIndex));\n      }\n    } else {\n      this.pages.push(this.filteredRows);\n    }\n\n    this.activePage = 0; // initial sorting\n\n    if (this.order) {\n      this.sort(this.columns[this.order[0]].field, this.order[1]);\n    }\n\n    this.$emit('pages', this.pages);\n    this.$emit('fields', this.columns);\n  },\n  watch: {\n    data: function data(newVal) {\n      this.columns = newVal.columns;\n    },\n    rows: function rows() {\n      this.filterArray();\n    },\n    entries: function entries() {\n      // do the split every entry change (changing entries amount)\n      var pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n      this.pages = [];\n\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * this.entries;\n        this.pages.push(this.filteredRows.slice(pageEndIndex - this.entries, pageEndIndex));\n      }\n\n      this.activePage = this.activePage < this.pages.length ? this.activePage : this.pages.length - 1;\n      this.$emit('pages', this.pages);\n    },\n    filteredRows: function filteredRows() {\n      // do the split on every change in rows (searching)\n      var pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\n      this.pages = [];\n\n      if (this.pagination) {\n        for (var i = 1; i <= pagesAmount; i++) {\n          var pageEndIndex = i * this.entries;\n          this.pages.push(this.filteredRows.slice(pageEndIndex - this.entries, pageEndIndex));\n        }\n      } else {\n        this.pages.push(this.filteredRows);\n      }\n\n      if (this.reactiveFlag === false) {\n        this.activePage = 0;\n      }\n\n      this.$emit('pages', this.pages);\n    }\n  }\n};\nexport default Datatable;\nexport { Datatable as mdbDatatable };",{"version":3,"sources":["Datatable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"dataTables_wrapper\" :style=\"wrapperStyle\">\r\n    <!-- Entries input and search -->\r\n    <mdb-row>\r\n      <mdb-col sm=\"6\" md=\"8\">\r\n        <mdb-row>\r\n          <mdb-col sm=\"12\" md=\"4\">\r\n            <datatable-select v-if=\"pagination\" @getValue=\"updateEntries\" :options=\"options\"/>\r\n          </mdb-col>\r\n          <mdb-col>\r\n            <mdb-btn @click=\"updateData\" v-if=\"refresh\" size=\"sm\" class=\"mt-0\" outline=\"primary\" >\r\n              <mdb-icon  icon=\"sync\" />\r\n            </mdb-btn>\r\n          </mdb-col>\r\n        </mdb-row>\r\n      </mdb-col>\r\n      <mdb-col sm=\"6\" md=\"4\" v-if=\"searching\">\r\n        <datatable-search @getValue=\"updateSearch\" />\r\n      </mdb-col>\r\n    </mdb-row>\r\n    <!-- Entries input and search -->\r\n\r\n    <!-- Main table -->\r\n    <tbl v-if=\"!scrollY\" v-bind=\"tableProps\" sm datatable>\r\n      <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\r\n        <tr>\r\n          <th\r\n            v-for=\"column in columns\"\r\n            :key=\"column.field\"\r\n            class=\"th-sm sorting\"\r\n            v-on:click=\"sort(column.field, column.sort)\"\r\n          >\r\n            {{column.label}} <i v-if=\"sorting\" class=\"fas fa-sort float-right\"></i>\r\n          </th>\r\n        </tr>\r\n      </tbl-head>\r\n      <tbl-body>\r\n        <tr v-for=\"row in pages[activePage]\" :key=\"row.id\">\r\n          <td v-for=\"(value, key) in row\" :key=\"key\">\r\n            <div v-html=\"value\"></div>\r\n          </td>\r\n        </tr>\r\n        <tr v-if=\"!pages.length\">\r\n          <td :colspan=\"columns.length\">No matching records found</td>\r\n        </tr>\r\n      </tbl-body>\r\n      <tbl-head v-if=\"tfoot\" tag=\"tfoot\">\r\n        <tr>\r\n          <th\r\n            v-for=\"column in columns\"\r\n            :key=\"column.field+'_foot'\"\r\n            class=\"th-sm sorting\"\r\n          >\r\n            {{column.label}}\r\n          </th>\r\n        </tr>\r\n      </tbl-head>\r\n    </tbl>\r\n    <!-- Main table -->\r\n\r\n    <!-- ScrollY table -->\r\n    <div v-if=\"scrollY\" class=\"dataTables_scroll\">\r\n      <div v-if=\"scrollY\" class=\"dataTables_scrollHead\" style=\"padding-right: 15px\">\r\n        <div class=\"dataTables_scrollHeadInner\">\r\n          <tbl v-bind=\"tableProps\" sm datatable>\r\n            <tbl-head :color=\"headerColor\" :textWhite=\"headerWhite\">\r\n              <tr>\r\n                <th\r\n                  v-for=\"column in columns\"\r\n                  :key=\"column.field\"\r\n                  class=\"th-sm sorting\"\r\n                  v-on:click=\"sort(column.field, column.sort)\"\r\n                >\r\n                  {{column.label}} <i class=\"fas fa-sort float-right\"></i>\r\n                </th>\r\n              </tr>\r\n            </tbl-head>\r\n          </tbl>\r\n        </div>\r\n      </div>\r\n      <tbl v-bind=\"tableProps\" sm datatable>\r\n        <tbl-body>\r\n          <tr v-for=\"row in pages[activePage]\" :key=\"row.id\">\r\n            <td v-for=\"(value, key) in row\" :key=\"key\">\r\n              <div v-html=\"value\"></div>\r\n            </td>\r\n          </tr>\r\n          <tr v-if=\"!pages.length\">\r\n            <td :colspan=\"columns.length\">No matching records found</td>\r\n          </tr>\r\n        </tbl-body>\r\n      </tbl>\r\n      <div class=\"dataTables_scrollFoot\" style=\"padding-right: 15px\">\r\n        <div class=\"dataTables_scrollFootInner\">\r\n          <tbl v-bind=\"tableProps\" sm datatable>\r\n            <tbl-head v-if=\"tfoot\" tag=\"tfoot\">\r\n              <tr>\r\n                <th\r\n                  v-for=\"column in columns\"\r\n                  :key=\"column.field+'_foot'\"\r\n                  class=\"th-sm sorting\"\r\n                >\r\n                  {{column.label}}\r\n                </th>\r\n              </tr>\r\n            </tbl-head>\r\n          </tbl>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- ScrollY table -->\r\n\r\n    <!-- Labels and pagination -->\r\n    <div v-if=\"pagination\" class=\"row\">\r\n      <div class=\"col-sm-12 col-md-5\">\r\n        <div class=\"dataTables_info\" role=\"status\" aria-live=\"polite\">\r\n          Showing {{activePage > 0 ? activePage*entries : activePage+1}} to {{pages.length-1 > activePage ? pages[activePage].length*(activePage+1) : filteredRows.length}} of {{filteredRows.length}} entries\r\n        </div>\r\n      </div>\r\n      <div class=\"col-sm-12 col-md-7\">\r\n        <div class=\"dataTables_paginate float-right\">\r\n          <pagination id=\"pagination\">\r\n            <page-item\r\n              v-if=\"pages.length > display\"\r\n              v-on:click.native=\"changePage(0)\"\r\n              :disabled=\"activePage === 0 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-left\" />\r\n              <p v-else class=\"pagination\">{{start}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-on:click.native=\"changePage(activePage-1)\"\r\n              :disabled=\"activePage === 0 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-left\" />\r\n              <p v-else class=\"pagination\">{{previous}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-for=\"(page, index) in visiblePages\"\r\n              :key=\"index\"\r\n              v-on:click.native=\"changePage(pages.indexOf(visiblePages[index]))\"\r\n              :active=\"activePage === pages.indexOf(visiblePages[index]) ? true : false\"\r\n            >\r\n              {{pages.indexOf(visiblePages[index])+1}}\r\n            </page-item>\r\n            <page-item\r\n              v-on:click.native=\"changePage(activePage+1)\"\r\n              :disabled=\"activePage === pages.length-1 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-right\" />\r\n              <p v-else class=\"pagination\">{{next}}</p>\r\n            </page-item>\r\n            <page-item\r\n              v-if=\"pages.length > display\"\r\n              v-on:click.native=\"changePage(pages.length-1)\"\r\n              :disabled=\"activePage === pages.length-1 ? true : false\"\r\n            >\r\n              <mdb-icon v-if=\"arrows\"  icon=\"angle-double-right\" />\r\n              <p v-else class=\"pagination\">{{end}}</p>\r\n            </page-item>\r\n          </pagination>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Labels and pagination -->\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tbl from './Table';\r\nimport TblHead from './TableHead';\r\nimport TblBody from './TableBody';\r\nimport Pagination from '../Components/Pagination';\r\nimport PageItem from '../Components/PageItem';\r\nimport mdbInput from '../Forms/Input';\r\nimport DatatableSelect from './DatatableSelect';\r\nimport DatatableSearch from './DatatableSearch';\r\nimport mdbIcon from '../Content/Fa';\r\nimport mdbRow from '../Layout/Row';\r\nimport mdbCol from '../Layout/Col';\r\nimport mdbBtn from '../Components/Button';\r\n\r\nconst Datatable = {\r\n  name: 'Datatable',\r\n  props: {\r\n    data: {\r\n      type: [Object, String],\r\n      default: () => ({\r\n        columns: [],\r\n        rows: []\r\n      })\r\n    },\r\n    autoWidth: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    borderless: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    headerColor: {\r\n      type: String\r\n    },\r\n    headerWhite: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    hover: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    materialInputs: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    maxWidth: {\r\n      type: String\r\n    },\r\n    maxHeight: {\r\n      type: String\r\n    },\r\n    order: {\r\n      type: Array\r\n    },\r\n    pagination: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveSm: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveMd: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveLg: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsiveXl: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    scrollY: {\r\n      type: Boolean,\r\n      defautl: false\r\n    },\r\n    searching: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    sorting: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    striped: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    start: {\r\n      type: String,\r\n      default: 'Start'\r\n    },\r\n    end: {\r\n      type: String,\r\n      default: 'End'\r\n    },\r\n    next: {\r\n      type: String,\r\n      default: 'Next'\r\n    },\r\n    previous: {\r\n      type: String,\r\n      default: 'Previos'\r\n    },\r\n    arrows: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    display: {\r\n      type: Number,\r\n      default: 5\r\n    }, \r\n    defaultRow: {\r\n      type: String,\r\n      default: '-'\r\n    },\r\n    defaultCol: {\r\n      type: String,\r\n      default: 'undefined'\r\n    },\r\n    tfoot: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    reactive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    refresh: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    time: {\r\n      type: Number,\r\n      default: 5000\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      updatedKey: null,\r\n      reactiveFlag: false,\r\n      recentSort: null,\r\n      interval: null,\r\n      rows: this.data.rows || [],\r\n      columns: this.data.columns || [],\r\n      options: [10, 25, 50, 100],\r\n      entries: 10,\r\n      pages: [],\r\n      activePage: 0,\r\n      search: '',\r\n      tableProps: {\r\n        autoWidth: this.autoWidth,\r\n        bordered: this.bordered,\r\n        borderless: this.borderless,\r\n        dark: this.dark,\r\n        fixed: this.fixed,\r\n        hover: this.hover,\r\n        responsive: this.responsive,\r\n        responsiveSm: this.responsiveSm,\r\n        responsiveMd: this.responsiveMd,\r\n        responsiveLg: this.responsiveLg,\r\n        responsiveXl: this.responsiveXl,\r\n        striped: this.striped,\r\n        dtScrollY: this.scrollY,\r\n        maxHeight: this.maxHeight\r\n      },\r\n      wrapperStyle: {\r\n        maxWidth: this.maxWidth ? this.maxWidth : '100%',\r\n        margin: '0 auto'\r\n      }\r\n    };\r\n  },\r\n  components: {\r\n    DatatableSearch,\r\n    DatatableSelect,\r\n    Tbl,\r\n    TblHead,\r\n    TblBody,\r\n    Pagination,\r\n    PageItem,\r\n    mdbInput,\r\n    mdbIcon,\r\n    mdbRow,\r\n    mdbCol,\r\n    mdbBtn\r\n  },\r\n  computed: {\r\n    rowsDisplay(){\r\n      return this.formatRows();\r\n    },\r\n    // filter objects by parameters match\r\n    filteredRows() {\r\n      return this.rowsDisplay.filter(row => {\r\n        return row.filter(value => value\r\n          .toString()\r\n          .toLowerCase()\r\n          .match(this.search.toLowerCase()))\r\n          .length > 0;\r\n      });\r\n    },\r\n    visiblePages() {\r\n      let start = this.activePage - Math.floor(this.display/2) > 0 ? this.activePage - Math.floor(this.display/2) : 0;\r\n      let end = start + this.display < this.pages.length ? start + this.display : this.pages.length;\r\n      if (end - start < this.display && end - this.display >= 0) {\r\n        start = end - this.display;\r\n      };\r\n      return this.pages.slice(start, end);\r\n    },\r\n    componentKey(){\r\n      return this.updatedKey;\r\n    }\r\n  },\r\n  methods: {\r\n    changePage(index) {\r\n      this.activePage = index;\r\n    },\r\n    sort(field, sort) {\r\n      this.recentSort = {field, sort};\r\n      if (this.sorting) {\r\n        sort === 'asc' ?\r\n          this.rows.sort((a, b) => (a[field] > b[field] ? 1 : -1)) :\r\n          this.rows.sort((a, b) => (a[field] > b[field] ? -1 : 1));\r\n        this.columns[this.columns.findIndex(column => column.field === field)].sort = sort === 'asc' ? 'desc' : 'asc';\r\n      }\r\n    },\r\n    updateEntries(value) {\r\n      this.entries = value;\r\n    },\r\n    updateSearch(value) {\r\n      this.search = this.escapeRegExp(value);\r\n      this.activePage = 0;\r\n    },\r\n    escapeRegExp(string) {\r\n      return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    },\r\n    setDefaultColumns(){\r\n      this.columns.forEach((col, i) => {\r\n        if (!col){\r\n          this.columns[i] = {\r\n            label: this.defaultCol,\r\n            field: this.defaultCol.concat(i),\r\n            sort: 'asc'\r\n          };\r\n        }\r\n      });\r\n    },\r\n    formatRows(){\r\n      this.setDefaultColumns();\r\n      let arrRows = [];\r\n      let headers = this.columns.map(col => col.field);\r\n      this.rows.map(row => {\r\n        let newRow = [];\r\n        headers.forEach(header => {\r\n          let content = row[header] || this.defaultRow;\r\n          newRow.push(content);\r\n        });\r\n        arrRows.push(newRow);\r\n      });\r\n      return arrRows;\r\n    },\r\n    fetchData(){\r\n      fetch(this.data)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          this.columns = json.columns;\r\n          this.rows = json.rows;\r\n          this.$emit('fields', this.columns);\r\n        })\r\n        .then(data => {\r\n          if (this.recentSort){\r\n            this.sort(this.recentSort.field, this.recentSort.sort);\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n    updateData(){\r\n      this.fetchData();\r\n      this.reactiveFlag = true;\r\n      this.updatedKey = Math.floor(Math.random()*100000000);\r\n    }\r\n  },\r\n  mounted() {\r\n    // bind data or download form API\r\n    if (typeof this.data === 'string') {\r\n      this.fetchData();\r\n    }\r\n    //reactivness in data table\r\n    if (this.reactive){\r\n      this.interval = setInterval(this.updateData, this.time);\r\n    }\r\n    // findout rows amount, and slice it into array (split into pages)\r\n    const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n    this.pages = [];\r\n    if (this.pagination) {\r\n      for (let i=1; i<=pagesAmount; i++) {\r\n        const pageEndIndex = i*this.entries;\r\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n      }\r\n    }\r\n    else {\r\n      this.pages.push(this.filteredRows);\r\n    }\r\n    this.activePage = 0;\r\n\r\n    // initial sorting\r\n    if (this.order) {\r\n      this.sort(this.columns[this.order[0]].field, this.order[1]);\r\n    }\r\n\r\n    this.$emit('pages', this.pages);\r\n    this.$emit('fields', this.columns);\r\n  },\r\n  watch: {\r\n    data(newVal) {\r\n      this.columns = newVal.columns;\r\n    },\r\n    rows(){\r\n      this.filterArray();\r\n    },\r\n    entries() {\r\n      // do the split every entry change (changing entries amount)\r\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n      this.pages = [];\r\n      for (let i=1; i<=pagesAmount; i++) {\r\n        const pageEndIndex = i*this.entries;\r\n        this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n      }\r\n      this.activePage = this.activePage < this.pages.length ? this.activePage : this.pages.length-1;\r\n\r\n      this.$emit('pages', this.pages);\r\n    },\r\n    filteredRows() {\r\n      // do the split on every change in rows (searching)\r\n      const pagesAmount = Math.ceil(this.filteredRows.length / this.entries);\r\n      this.pages = [];\r\n      if (this.pagination) {\r\n        for (let i=1; i<=pagesAmount; i++) {\r\n          const pageEndIndex = i*this.entries;\r\n          this.pages.push(this.filteredRows.slice(pageEndIndex-this.entries, pageEndIndex));\r\n        }\r\n      }\r\n      else {\r\n        this.pages.push(this.filteredRows);\r\n      }\r\n      if (this.reactiveFlag === false){\r\n        this.activePage = 0;\r\n      }\r\n\r\n      this.$emit('pages', this.pages);\r\n    }\r\n  }\r\n};\r\n\r\nexport default Datatable;\r\nexport { Datatable as mdbDatatable };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n\r\n<style>\r\n.pagination {\r\n  margin-bottom: 0px;\r\n}\r\n</style>\r\n"],"sourceRoot":"node_modules/mdbvue/src/components/Tables"}]}