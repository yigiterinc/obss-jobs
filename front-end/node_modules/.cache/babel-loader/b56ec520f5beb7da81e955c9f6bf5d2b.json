{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Advanced/ToastNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Advanced/ToastNotification.vue","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport mdbBtn from \"../Components/Button\";\nimport mdbIcon from \"../Content/Fa\";\nvar ToastNotification = {\n  name: 'Notification',\n  components: {\n    mdbBtn: mdbBtn,\n    mdbIcon: mdbIcon\n  },\n  props: {\n    time: {\n      type: Boolean,\n      default: true\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    message: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    icon: {\n      type: String,\n      default: \"square\"\n    },\n    iconSize: {\n      type: String,\n      default: 'lg'\n    },\n    iconColor: {\n      type: String,\n      default: 'primary'\n    },\n    received: Date\n  },\n  data: function data() {\n    return {\n      currentTime: '',\n      startTime: '',\n      showNotification: this.show\n    };\n  },\n  computed: {\n    showing: {\n      get: function get() {\n        return this.showNotification;\n      },\n      set: function set(newVal) {\n        this.showNotification = newVal;\n      }\n    },\n    calculatedTime: function calculatedTime() {\n      var time = (this.currentTime - this.startTime) / 1000;\n      return this.formatTime(time);\n    }\n  },\n  methods: {\n    updateTime: function updateTime() {\n      this.currentTime = new Date().getTime();\n    },\n    formatTime: function formatTime(time) {\n      switch (true) {\n        case time === 0:\n          return \"now\";\n\n        case time < 60:\n          var second = Math.floor(time);\n          return \"\".concat(second, \" seconds ago\");\n\n        case time < 120:\n          return \"1 minute ago\";\n\n        case time < 3600:\n          var minutes = Math.floor(time / 60);\n          return \"\".concat(minutes, \" minutes ago\");\n\n        case time === 3600:\n          return \"1 hour ago\";\n\n        case time > 3600 && time < 86400:\n          var hours = Math.floor(time / 3600);\n          return \"\".concat(hours, \" hours ago\");\n\n        case time === 86400:\n          return \"a day ago\";\n\n        case time > 86400:\n          var days = Math.floor(time / 86400);\n          return \"\".concat(days, \" days ago\");\n      }\n    },\n    closeToast: function closeToast() {\n      this.showing = false;\n    }\n  },\n  mounted: function mounted() {\n    var timeReceived = this.received || new Date();\n    this.startTime = timeReceived.getTime();\n    this.currentTime = new Date().getTime();\n    window.setInterval(this.updateTime, 60000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.clearInterval(this.updateTime);\n  }\n};\nexport default ToastNotification;\nexport { ToastNotification as mdbToastNotification };",{"version":3,"sources":["ToastNotification.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <transition enter-active-class=\"animated fadeIn\" leave-active-class=\"animated \">\r\n    <div v-if=\"showing\" class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n      <div class=\"toast-header\">\r\n        <mdb-icon class=\"mr-2\" :icon=\"icon\" :color=\"iconColor\" :size=\"iconSize\"></mdb-icon>\r\n        <strong class=\"mr-auto\">{{title}}</strong>\r\n        <small v-if=\"time\" class=\"text-muted\">{{calculatedTime}}</small>\r\n        <button type=\"button\" class=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\" @click=\"closeToast\"><mdb-icon size=\"xs\" icon=\"times\"/></button>\r\n      </div>\r\n      <div class=\"toast-body\">\r\n        {{message}}\r\n      </div>\r\n    </div>\r\n  </transition>\r\n</template>\r\n\r\n\r\n<script>\r\nimport mdbBtn from '../Components/Button';\r\nimport mdbIcon from '../Content/Fa';\r\nconst ToastNotification = {\r\n  name: 'Notification',\r\n  components: {\r\n    mdbBtn,\r\n    mdbIcon\r\n  },\r\n  props: {\r\n    time: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    show: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    message: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"square\"\r\n    },\r\n    iconSize: {\r\n      type: String,\r\n      default: 'lg'\r\n    },\r\n    iconColor: {\r\n      type: String,\r\n      default: 'primary'\r\n    },\r\n    received: Date\r\n  },\r\n  data(){\r\n    return {\r\n      currentTime: '',\r\n      startTime: '',\r\n      showNotification: this.show\r\n    };\r\n  },\r\n  computed: {\r\n    showing: {\r\n      get() {\r\n        return this.showNotification;\r\n      },\r\n      set(newVal) {\r\n        this.showNotification = newVal;\r\n      }\r\n    },\r\n    calculatedTime(){\r\n      let time = (this.currentTime - this.startTime)/1000;\r\n      return this.formatTime(time);\r\n    }\r\n  },\r\n  methods: {\r\n    updateTime(){\r\n      this.currentTime = new Date().getTime();\r\n    },\r\n    formatTime(time){\r\n      switch (true) {\r\n        case (time === 0):\r\n          return `now`;\r\n        case (time < 60):\r\n          let second = Math.floor(time);\r\n          return `${second} seconds ago`;\r\n        case (time < 120):\r\n          return `1 minute ago`;\r\n        case (time < 3600):\r\n          let minutes = Math.floor(time/60);\r\n          return `${minutes} minutes ago`;\r\n        case (time === 3600):\r\n          return `1 hour ago`;\r\n        case (time > 3600 && time < 86400):\r\n          let hours = Math.floor(time/3600);\r\n          return `${hours} hours ago`;\r\n        case (time === 86400):\r\n          return `a day ago`;\r\n        case (time > 86400):\r\n          let days = Math.floor(time/86400);\r\n          return `${days} days ago`;\r\n      }\r\n    },\r\n    closeToast(){\r\n      this.showing = false;\r\n    },\r\n  },\r\n  mounted(){\r\n    let timeReceived = this.received || new Date();\r\n    this.startTime = timeReceived.getTime();\r\n    this.currentTime = new Date().getTime();\r\n    window.setInterval(this.updateTime, 60000);\r\n  },\r\n  beforeDestroy(){\r\n    window.clearInterval(this.updateTime);\r\n  }\r\n};\r\n\r\nexport default ToastNotification;\r\nexport { ToastNotification as mdbToastNotification };\r\n</script>\r\n<style scoped>\r\n  .toast {\r\n    opacity: 1;\r\n  }\r\n  .text-muted {\r\n    padding-left: 10px;\r\n  }\r\n</style>\r\n"],"sourceRoot":"node_modules/mdbvue/src/components/Advanced"}]}