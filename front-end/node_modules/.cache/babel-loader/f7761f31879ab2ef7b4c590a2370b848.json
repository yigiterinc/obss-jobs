{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/Job-Details-Page/JobDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/Job-Details-Page/JobDetails.vue","mtime":1563969747466},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Nav from \"../Nav.vue\";\nimport ServicesMixin from \"../mixins/services-mixin\";\nimport CommonsMixin from \"../mixins/commons-mixin\";\nexport default {\n  name: \"JobApply\",\n  mixins: [ServicesMixin, CommonsMixin],\n  components: {\n    Nav: Nav\n  },\n  data: function data() {\n    return {\n      jobDetails: {},\n      jobRequirements: [],\n      location: \"Istanbul (Teknopark)\",\n      dataFetched: false,\n      userLoggedIn: true,\n      anyContentIsEdited: false,\n      candidateBlacklisted: false,\n      activationDate: \"\",\n      expirationDate: \"\",\n      linkedInLogin: \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=86uobfdmclzprd\" + \"&redirect_uri=http://localhost:8080\" + \"&state=ASk220aSFAxx&scope=r_liteprofile%20r_emailaddress%20w_member_social\",\n      contentEditableClasses: [{\n        className: 'post__title',\n        edited: false\n      }, {\n        className: 'post__description',\n        edited: false\n      }, {\n        className: 'activation_date',\n        edited: false\n      }, {\n        className: 'expiration_date',\n        edited: false\n      }, {\n        className: 'is_active',\n        edited: false\n      }]\n    };\n  },\n  computed: {\n    userAuthenticated: function userAuthenticated() {\n      return this.$store.getters.userAuthenticated;\n    },\n    hrExpertAuthenticated: function hrExpertAuthenticated() {\n      return this.$store.getters.hrExpertAuthenticated;\n    }\n  },\n  methods: {\n    getJobPostId: function getJobPostId() {\n      var url = window.location.pathname; // return the first url param\n\n      return url.split(\"/\")[2];\n    },\n    isHrExpertUrl: function isHrExpertUrl() {\n      var url = window.location.pathname;\n      return url.split(\"/\")[3] === 'hr';\n    },\n    isHrExpert: function isHrExpert() {\n      return this.isHrExpertUrl() && this.$store.getters.hrExpertAuthenticated;\n    },\n    saveApplication: function saveApplication() {\n      var _this = this;\n\n      if (!this.candidateBlacklisted) {\n        var userId = this.$store.state.userId;\n\n        try {\n          this.saveApplicationWithIdAndJobPost(userId, this.getJobPostId()).then(function (response) {\n            if (response.status === 200) {\n              // If application already exists\n              _this.showApplicationSavedAlert();\n\n              _this.redirectToJobPostsAfterWaiting();\n            } else {\n              _this.showApplicationAlreadyExistsAlert();\n            }\n          });\n        } catch (e) {\n          console.log(e.status);\n        }\n      } else {\n        this.showCandidateBlacklistedAlert();\n      }\n    },\n    submitChanges: function submitChanges() {\n      var contentEditableClasses = this.contentEditableClasses;\n\n      if (this.anyContentIsEdited) {\n        var title = document.getElementsByClassName(contentEditableClasses[0].className)[0].innerText;\n        var description = document.getElementsByClassName(contentEditableClasses[1].className)[0].innerText;\n        var activationDate = this.activationDate === \"\" ? this.getDateFormatted(this.jobDetails.activationDate) : this.getDateFormatted(this.convertStringToParseableDate(this.activationDate));\n        var expirationDate = this.expirationDate === \"\" ? this.getDateFormatted(this.jobDetails.expirationDate) : this.getDateFormatted(this.convertStringToParseableDate(this.expirationDate));\n        var active = this.jobDetails.isActive;\n        this.updateJobPostDetails(this.getJobPostId(), title, active, description, activationDate, expirationDate);\n        this.updateRequirements();\n        this.showSuccessAlert();\n      } else {\n        this.showNoContentIsEditedAlert();\n      }\n    },\n    updateRequirements: function updateRequirements() {\n      var _this2 = this;\n\n      this.jobRequirements.forEach(function (requirementObject) {\n        if (requirementObject.edited === true) {\n          var requirementEdited = document.getElementById(requirementObject.id).innerText;\n          var urlifiedRequirement = requirementEdited.replace(/%20/g, \" \");\n\n          _this2.updateJobRequirementWithId(requirementObject.id, urlifiedRequirement);\n        }\n      });\n    },\n    saveIfAuthenticated: function saveIfAuthenticated() {\n      var _this3 = this;\n\n      if (this.userAuthenticated && !this.isHrExpert()) {\n        this.saveApplication();\n      } else {\n        this.showNotLoggedInAlert();\n        setTimeout(function () {\n          window.location.href = _this3.linkedInLogin;\n        }, 2000);\n      }\n    },\n    changeContentEdited: function changeContentEdited(index) {\n      this.contentEditableClasses[index].edited = true;\n      this.anyContentIsEdited = true;\n    },\n    changeRequirementEdited: function changeRequirementEdited(index) {\n      this.jobRequirements[index].edited = true;\n      this.anyContentIsEdited = true;\n    },\n    showSuccessAlert: function showSuccessAlert() {\n      this.$swal('Saved', 'Your changes are successfully saved', 'success');\n    },\n    showApplicationSavedAlert: function showApplicationSavedAlert() {\n      this.$swal('Your application is taken', 'Your application is taken, good luck', 'success');\n    },\n    showApplicationAlreadyExistsAlert: function showApplicationAlreadyExistsAlert() {\n      this.$swal('Already applied', 'You have already applied for this job.', 'error');\n    },\n    showNoContentIsEditedAlert: function showNoContentIsEditedAlert() {\n      this.$swal('No edit', 'Content is not edited', 'warning');\n    },\n    showFailureAlert: function showFailureAlert() {\n      this.$swal('Error', 'An error occurred', 'error');\n    },\n    showCandidateBlacklistedAlert: function showCandidateBlacklistedAlert() {\n      this.$swal('Banned', 'You are banned from applying for jobs!', 'error');\n    },\n    showNotLoggedInAlert: function showNotLoggedInAlert() {\n      this.$swal('You are not logged in', 'You need to log in before applying, redirecting to login');\n    },\n    redirectToJobPostsAfterWaiting: function redirectToJobPostsAfterWaiting() {\n      var _this4 = this;\n\n      setTimeout(function () {\n        return _this4.$router.push('/job-posts');\n      }, 3000);\n    },\n    fetchCandidateBlacklistStatus: function fetchCandidateBlacklistStatus(candidateId) {\n      var _this5 = this;\n\n      this.getCandidateBlacklistStatus(candidateId).then(function (blacklistStatus) {\n        _this5.candidateBlacklisted = blacklistStatus;\n      });\n    },\n    fetchJobRequirements: function fetchJobRequirements(jobId) {\n      var _this6 = this;\n\n      this.getJobRequirements(jobId).then(function (jobRequirements) {\n        jobRequirements.forEach(function (jobRequirementsDto) {\n          _this6.jobRequirements.push({\n            id: jobRequirementsDto.id,\n            requirement: jobRequirementsDto.requirement,\n            edited: false\n          });\n        });\n      });\n    },\n    fetchJobDetails: function fetchJobDetails(jobId) {\n      var _this7 = this;\n\n      this.getJobDetails(jobId).then(function (jobDetails) {\n        _this7.jobDetails = jobDetails;\n      });\n    },\n    getLocationText: function getLocationText() {\n      var jobLocation = this.jobDetails.location;\n\n      if (jobLocation) {\n        if (jobLocation.toLowerCase() === \"istanbul\") {\n          return \"Istanbul (Teknopark)\";\n        } else if (jobLocation.toLowerCase() === \"izmit\" || jobLocation.toLowerCase() === \"kocaeli\") {\n          return \"Kocaeli (KOÃœ)\";\n        } else if (jobLocation.toLowerCase() === \"ankara\") {\n          return \"Ankara (Bilkent Cyberpark)\";\n        }\n      }\n\n      return jobLocation;\n    },\n    convertStringToParseableDate: function convertStringToParseableDate(str) {\n      return str.replace(\"/-\", \"/\");\n    },\n    getDateFormatted: function getDateFormatted(date) {\n      // @Param: Date in YYYY-MM-DD format and returns in DD-MM-YYYY format\n      if (typeof date !== \"string\") date = date.toString();\n      var day = parseInt(date.split(\"-\")[2]) + 1;\n      var month = date.split(\"-\")[1];\n      var year = date.split(\"-\")[0];\n      return day + \"/\" + month + \"/\" + year;\n    },\n    getActivationDate: function getActivationDate() {\n      if (this.jobDetails.activationDate) return this.getDDMMYYFormatFromYYYYMMDD(this.jobDetails.activationDate);\n    },\n    getExpirationDate: function getExpirationDate() {\n      if (this.jobDetails.expirationDate) return this.getDDMMYYFormatFromYYYYMMDD(this.jobDetails.expirationDate);\n    }\n  },\n  mounted: function mounted() {\n    var jobId = this.getJobPostId();\n    this.fetchJobRequirements(jobId);\n    this.fetchJobDetails(jobId);\n    this.fetchCandidateBlacklistStatus(this.$store.state.userId);\n    this.dataFetched = true;\n  }\n};",{"version":3,"sources":["JobDetails.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"job-details\" v-if=\"dataFetched\">\n        <Nav></Nav>\n        <header class=\"header\"></header>\n        <br>\n        <div class=\"post content\">\n            <h1 class=\"post__title\" @input=\"changeContentEdited(0)\" :contenteditable=\"isHrExpert()\">\n                {{jobDetails.title}}</h1>\n            <img src=\"../../assets/images/obss-logo.png\" alt=\"obss-logo\" class=\"logo\">\n            <p class=\"location\">{{ getLocationText() }}</p>\n            <div class=\"short-info\">\n                <p>Location: {{this.jobDetails.location}}</p>\n                <p>Functional Area: Engineering, R & D</p>\n                <p>Industry: Software</p>\n            </div>\n            <div class=\"description\">\n                <p class=\"description_label\">Job Description</p>\n                <p class=\"post__description\" @input=\"changeContentEdited(1)\" :contenteditable=\"isHrExpert()\">\n                    {{jobDetails.description}}</p>\n            </div>\n            <div>\n                <p class=\"invite\"><strong>If you think you satisfy these requirements:</strong></p>\n                <ul v-for=\"(requirementObject, i) in jobRequirements\" class=\"post__requirements\"\n                    @input=\"changeRequirementEdited(i)\" :contenteditable=\"isHrExpert()\"\n                    :id=\"requirementObject.id\">\n                    <li>{{requirementObject.requirement}}</li>\n                </ul>\n                <p class=\"invite-finish\"><strong>We would like to see you in our team!</strong></p>\n            </div>\n            <b-card bg-variant=\"dark\" border-variant=\"info\"\n                    header=\"Follow your dreams\" text-variant=\"white\" class=\"bottom-container\">\n                <b-card-text>\n                    <b-button type=\"button\" class=\"btn-lg btn-info apply__button\"\n                                                                        v-on:click=\"saveIfAuthenticated()\">\n                      Apply Now\n                    </b-button>\n                    <p class=\"login-prompt\"><em>*You need to log in with your LinkedIn account before applying</em></p>\n                </b-card-text>\n            </b-card>\n        </div>\n        <div>\n            <div class=\"dates\">\n                <p v-if=\"!isHrExpert()\" class=\"activation_date\" v-model=\"jobDetails.activationDate\"\n                   :contenteditable=\"isHrExpert()\">\n                    <em>Posted at: {{ getActivationDate() }}</em>\n                </p>\n                <div v-else>\n                    <p>Activation date</p>\n                    <input type=\"date\" name=\"activationdate\" id=\"activation-date\" v-model=\"activationDate\" @input=\"changeContentEdited(2)\">\n                </div>\n                <p v-if=\"!isHrExpert()\" class=\"expiration_date\" v-model=\"jobDetails.expirationDate\"\n                   :contenteditable=\"isHrExpert()\">\n                    <em>Expires at: {{ getExpirationDate() }}</em>\n                </p>\n                <div v-else>\n                    <p>Expiration Date</p>\n                    <input  type=\"date\" name=\"expirationdate\" id=\"expiration-date\" v-model=\"expirationDate\" @input=\"changeContentEdited(3)\">\n                </div>\n            </div>\n            <div class=\"form-check is-active\" v-if=\"isHrExpert()\">\n                <input type=\"checkbox\" class=\"form-check-input is_active\" id=\"isActive\"\n                       :checked=\"jobDetails.isActive\" v-model=\"jobDetails.isActive\" @input=\"changeContentEdited(4)\">\n                <label class=\"form-check-label\" for=\"isActive\">Job Post is active</label>\n            </div>\n\n            <b-button v-if=\"isHrExpert()\" type=\"button\"\n                      class=\"btn-lg btn-danger save-changes\"\n                      v-on:click=\"submitChanges()\">\n                Save changes\n            </b-button>\n        </div>\n    </div>\n</template>\n\n<script>\n    import Nav from \"../Nav.vue\";\n    import ServicesMixin from \"../mixins/services-mixin\";\n    import CommonsMixin from \"../mixins/commons-mixin\";\n\n    export default {\n        name: \"JobApply\",\n        mixins: [ServicesMixin, CommonsMixin],\n        components: {\n            Nav: Nav\n        },\n        data() {\n            return {\n                jobDetails: {},\n                jobRequirements: [],\n                location: \"Istanbul (Teknopark)\",\n                dataFetched: false,\n                userLoggedIn: true,\n                anyContentIsEdited: false,\n                candidateBlacklisted: false,\n                activationDate: \"\",\n                expirationDate: \"\",\n                linkedInLogin: \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=86uobfdmclzprd\" +\n                                \"&redirect_uri=http://localhost:8080\" +\n                                \"&state=ASk220aSFAxx&scope=r_liteprofile%20r_emailaddress%20w_member_social\",\n                contentEditableClasses: [\n                    { className: 'post__title', edited: false },\n                    { className: 'post__description', edited: false },\n                    { className: 'activation_date', edited: false },\n                    { className: 'expiration_date', edited: false },\n                    { className: 'is_active', edited: false}\n                ]\n            }\n        },\n        computed: {\n            userAuthenticated() {\n                return this.$store.getters.userAuthenticated;\n            },\n            hrExpertAuthenticated() {\n                return this.$store.getters.hrExpertAuthenticated;\n            }\n        },\n        methods: {\n            getJobPostId: function () {\n                const url = window.location.pathname;\n                // return the first url param\n                return url.split(\"/\")[2];\n            },\n            isHrExpertUrl: function () {\n                const url = window.location.pathname;\n                return url.split(\"/\")[3] === 'hr';\n            },\n            isHrExpert: function () {\n                return this.isHrExpertUrl() && this.$store.getters.hrExpertAuthenticated;\n            },\n            saveApplication: function () {\n                if (!this.candidateBlacklisted) {\n                    const userId = this.$store.state.userId;\n\n                    try {\n                        this.saveApplicationWithIdAndJobPost(userId, this.getJobPostId())\n                            .then((response) => {\n                                if (response.status === 200) {\n                                    // If application already exists\n                                    this.showApplicationSavedAlert();\n                                    this.redirectToJobPostsAfterWaiting();\n                                } else {\n                                    this.showApplicationAlreadyExistsAlert();\n                                }\n                            });\n                    } catch (e) {\n                        console.log(e.status);\n                    }\n                } else {\n                    this.showCandidateBlacklistedAlert();\n                }\n            },\n            submitChanges: function () {\n                const contentEditableClasses = this.contentEditableClasses;\n\n                if (this.anyContentIsEdited) {\n                        let title = document.getElementsByClassName(contentEditableClasses[0].className)[0].innerText;\n                        let description = document.getElementsByClassName(contentEditableClasses[1].className)[0].innerText;\n\n                        let activationDate = this.activationDate === \"\" ?\n                            this.getDateFormatted(this.jobDetails.activationDate) :\n                            this.getDateFormatted(this.convertStringToParseableDate(this.activationDate));\n\n                        let expirationDate = this.expirationDate === \"\" ?\n                            this.getDateFormatted(this.jobDetails.expirationDate) :\n                            this.getDateFormatted(this.convertStringToParseableDate(this.expirationDate));\n\n                        let active = this.jobDetails.isActive;\n\n                        this.updateJobPostDetails(this.getJobPostId(), title, active,\n                                                  description, activationDate, expirationDate);\n                        this.updateRequirements();\n                        this.showSuccessAlert();\n                    } else {\n                    this.showNoContentIsEditedAlert();\n                }\n            },\n            updateRequirements: function () {\n                this.jobRequirements.forEach(requirementObject => {\n                    if (requirementObject.edited === true) {\n                        const requirementEdited = document.getElementById(requirementObject.id).innerText;\n                        let urlifiedRequirement = requirementEdited.replace(/%20/g, \" \");\n\n                        this.updateJobRequirementWithId(requirementObject.id, urlifiedRequirement);\n                    }\n                });\n            },\n            saveIfAuthenticated: function () {\n                if (this.userAuthenticated && !this.isHrExpert()) {\n                    this.saveApplication()\n                } else {\n                    this.showNotLoggedInAlert();\n                    setTimeout(() => {\n                        window.location.href =  this.linkedInLogin;\n                    }, 2000)\n                }\n            },\n            changeContentEdited: function (index) {\n                this.contentEditableClasses[index].edited = true;\n                this.anyContentIsEdited = true;\n            },\n            changeRequirementEdited: function(index) {\n                this.jobRequirements[index].edited = true;\n                this.anyContentIsEdited = true;\n            },\n            showSuccessAlert: function () {\n                this.$swal('Saved', 'Your changes are successfully saved', 'success');\n            },\n            showApplicationSavedAlert: function () {\n                this.$swal('Your application is taken', 'Your application is taken, good luck', 'success');\n            },\n            showApplicationAlreadyExistsAlert: function () {\n                this.$swal('Already applied', 'You have already applied for this job.', 'error');\n            },\n            showNoContentIsEditedAlert: function () {\n                this.$swal('No edit', 'Content is not edited' , 'warning');\n            },\n            showFailureAlert: function () {\n                this.$swal('Error', 'An error occurred' , 'error');\n            },\n            showCandidateBlacklistedAlert: function () {\n                this.$swal('Banned', 'You are banned from applying for jobs!', 'error');\n            },\n            showNotLoggedInAlert: function () {\n                this.$swal('You are not logged in', 'You need to log in before applying, redirecting to login');\n            },\n            redirectToJobPostsAfterWaiting: function () {\n                setTimeout(() => this.$router.push('/job-posts'), 3000);\n            },\n            fetchCandidateBlacklistStatus: function (candidateId) {\n                this.getCandidateBlacklistStatus(candidateId).then(blacklistStatus => {\n                    this.candidateBlacklisted = blacklistStatus;\n                })\n            },\n            fetchJobRequirements: function (jobId) {\n                this.getJobRequirements(jobId).then(jobRequirements => {\n                    jobRequirements.forEach(jobRequirementsDto => {\n                        this.jobRequirements.push({\n                            id: jobRequirementsDto.id,\n                            requirement: jobRequirementsDto.requirement,\n                            edited: false\n                        });\n                    })\n                });\n            },\n            fetchJobDetails: function (jobId) {\n                this.getJobDetails(jobId).then(jobDetails => {\n                    this.jobDetails = jobDetails;\n                });\n            },\n            getLocationText: function () {\n                const jobLocation = this.jobDetails.location;\n\n                if (jobLocation) {\n                    if (jobLocation.toLowerCase() === \"istanbul\") {\n                        return \"Istanbul (Teknopark)\";\n                    } else if (jobLocation.toLowerCase() === \"izmit\" || jobLocation.toLowerCase() === \"kocaeli\") {\n                        return \"Kocaeli (KOÃœ)\";\n                    } else if (jobLocation.toLowerCase() === \"ankara\") {\n                        return \"Ankara (Bilkent Cyberpark)\";\n                    }\n                }\n\n                return jobLocation;\n            },\n            convertStringToParseableDate: function (str) {\n                return str.replace(\"/-\",\"/\")\n            },\n            getDateFormatted: function (date) {  // @Param: Date in YYYY-MM-DD format and returns in DD-MM-YYYY format\n                if (typeof date !== \"string\")\n                    date = date.toString();\n\n                const day = parseInt(date.split(\"-\")[2]) + 1;\n                const month = date.split(\"-\")[1];\n                const year = date.split(\"-\")[0];\n\n                return day + \"/\" + month + \"/\" + year;\n            },\n            getActivationDate: function() {\n                if (this.jobDetails.activationDate)\n                    return this.getDDMMYYFormatFromYYYYMMDD(this.jobDetails.activationDate);\n            },\n            getExpirationDate: function () {\n                if (this.jobDetails.expirationDate)\n                    return this.getDDMMYYFormatFromYYYYMMDD(this.jobDetails.expirationDate);\n            }\n        },\n        mounted () {\n            const jobId = this.getJobPostId();\n            this.fetchJobRequirements(jobId);\n            this.fetchJobDetails(jobId);\n            this.fetchCandidateBlacklistStatus(this.$store.state.userId);\n\n            this.dataFetched = true;\n        }\n    }\n</script>\n\n<style scoped lang=\"scss\">\n    @import '../../styles/abstracts/colors';\n    @import '../../styles/abstracts/typography';\n\n    .header {\n        background-image: url(\"../../assets/images/thebay.jpg\");\n        background-size: cover;\n        background-position: center;\n        height: 45vh;\n        width: 100vw;\n        position: relative;\n        margin-bottom: 0.75rem;\n        @include set_font_montserrat();\n        object-fit: cover;\n    }\n\n    .job-details {\n        p {\n            color: $slightly-blue-black;\n        }\n\n        .location {\n            color: gray;\n            font-size: 1.5rem;\n            letter-spacing: .001rem;\n            margin-bottom: 2rem;\n        }\n\n        .short-info {\n            p {\n                margin-bottom: 0;\n                letter-spacing: .001rem;\n                font-size: 16px;\n                font-weight: 400;\n                text-align: left;\n            }\n\n            margin-bottom: 1rem;\n        }\n\n        .apply__button {\n            margin-top: 2rem;\n            padding-right: 90px !important;\n            padding-left: 90px !important;\n\n            &:hover, &:link, &:active, &:focus {\n                background-color: $color-complement-1;\n            }\n        }\n    }\n\n    .logo {\n        max-width: 170px;\n        max-height: 200px;\n        margin-bottom: 1rem;\n    }\n\n    .content {\n        margin-left: 3rem;\n        width: 50vw;\n    }\n\n    .post__title {\n        font-size: 2rem;\n        margin-bottom: 1rem;\n        text-align: left;\n        color: $slightly-blue-black;\n    }\n\n    .post__description {\n        margin-bottom: 2rem;\n    }\n\n    .description_label {\n        font-size: 1.5rem;\n        font-weight: 500;\n    }\n\n    .dates {\n        p {\n            margin-bottom: 0;\n        }\n\n        margin-top: 2rem;\n        margin-left: 3rem;\n        margin-bottom: 1rem;\n    }\n\n    .bottom-container {\n        height: 15rem;\n        right: 0;\n        left: 50vw;\n        top: 45vh;\n        width: 40vw;\n        position: absolute;\n        text-align: center;\n    }\n\n    .btn-info {\n        background: $color-complement-1;\n    }\n\n    .link {\n        @include remove_link_styles;\n    }\n\n    li {\n        margin-left: 1rem;\n        color: $slightly-blue-black;\n    }\n\n    .is-active {\n        margin-top: 1rem;\n        margin-left: 3rem;\n        margin-bottom: 15px;\n    }\n\n    .bottom-container__shadow {\n        height: 6rem;\n        background: #000;\n    }\n\n    ul {\n        margin-bottom: 0;\n        padding-left: 0;\n    }\n\n    .post__requirements--invite {\n        margin-bottom: 1rem;\n    }\n\n    .invite-finish {\n        margin-top: 1rem;\n    }\n\n    .card-header {\n        height: 4rem;\n        font-size: 25px;\n        letter-spacing: 0.2rem;\n    }\n\n    .card-body {\n        background-color: #e5e5e5;\n        padding-bottom: 0;\n    }\n\n    .login-prompt {\n        margin-top: 30px;\n        font-size: 15px;\n    }\n\n    .save-changes {\n        margin-left: 18rem;\n        margin-bottom: 2rem;\n    }\n\n    [type=\"date\"] {\n        background:#fff url(https://cdn1.iconfinder.com/data/icons/cc_mono_icon_set/blacks/16x16/calendar_2.png)  97% 50% no-repeat ;\n    }\n\n    [type=\"date\"]::-webkit-inner-spin-button {\n        display: none;\n    }\n\n    [type=\"date\"]::-webkit-calendar-picker-indicator {\n        opacity: 0;\n    }\n\n    #activation-date {\n        margin-bottom: 1rem;\n    }\n\n    input[type=\"date\"] {\n        border: 1px solid #c4c4c4;\n        border-radius: 5px;\n        background-color: #fff;\n        padding: 3px 5px;\n        box-shadow: inset 0 3px 6px rgba(0,0,0,0.1);\n        width: 190px;\n    }\n</style>\n"],"sourceRoot":"src/components/Job-Details-Page"}]}