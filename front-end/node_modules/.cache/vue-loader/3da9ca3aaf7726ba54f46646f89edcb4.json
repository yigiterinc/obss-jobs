{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Layout/Masonry.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Layout/Masonry.vue","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nconst Masonry = {\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'div'\r\n    },\r\n    horizontal: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    flexbox: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    maxHeight: {\r\n      type: [String, Number],\r\n      default: 'auto'\r\n    },\r\n    numCols: {\r\n      type: Number\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      height: null\r\n    };\r\n  },\r\n  computed: {\r\n    masonryClass() {\r\n      return [\r\n        this.horizontal || this.flexbox ? this.flexbox ? 'masonry-with-flex' : 'masonry-horizontal' : 'masonry-with-columns'\r\n      ];\r\n    },\r\n    masonryStyle() { \r\n      return {\r\n        maxHeight: this.height ? isNaN(this.height) ? this.height : `${this.height}px` : null\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    checkScreenSize() {\r\n      if (window.innerWidth < 600) {\r\n        this.height = null;\r\n      }\r\n      else if (window.innerWidth < 1200) {\r\n        const dimentions = this.$slots.default.filter(el => el.tag).map(img => img.elm.clientWidth);\r\n        const center = Math.floor(dimentions.length/2);\r\n        const firstCol = dimentions.slice(0, center).reduce((a, b) => a + b);\r\n        const secCol = dimentions.slice(center).reduce((a, b) => a + b);\r\n\r\n        this.height = firstCol > secCol ? firstCol : secCol;\r\n      }\r\n      else {\r\n        this.height = this.maxHeight;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.responsive) {\r\n      setTimeout(this.checkScreenSize, 200);\r\n      window.addEventListener(\"resize\", this.checkScreenSize);\r\n    } else {\r\n      this.height = this.maxHeight;\r\n    }\r\n    \r\n    if (!this.horizontal && !this.flexbox) {\r\n      const colHeights = Array(this.numCols).fill(0);\r\n      const masonryWrapper = this.$refs.masonry;\r\n      Array.from(masonryWrapper.children).forEach((child, i) => {\r\n        const order = i % this.numCols;\r\n        child.style.order = order;\r\n        colHeights[order] += parseFloat(child.clientHeight);\r\n      });\r\n      masonryWrapper.style.height = Math.max(...colHeights) + 'px';\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.responsive) {\r\n      window.removeEventListener(\"resize\", this.checkScreenSize);\r\n    }\r\n  }\r\n};\r\n\r\nexport default Masonry;\r\nexport { Masonry as mdbMasonry };\r\n",{"version":3,"sources":["Masonry.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Masonry.vue","sourceRoot":"node_modules/mdbvue/src/components/Layout","sourcesContent":["<template>\r\n  <component :is=\"tag\" :class=\"masonryClass\" :style=\"masonryStyle\" ref=\"masonry\">\r\n    <slot></slot>\r\n  </component>\r\n</template>\r\n\r\n<script>\r\nconst Masonry = {\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'div'\r\n    },\r\n    horizontal: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    flexbox: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    maxHeight: {\r\n      type: [String, Number],\r\n      default: 'auto'\r\n    },\r\n    numCols: {\r\n      type: Number\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      height: null\r\n    };\r\n  },\r\n  computed: {\r\n    masonryClass() {\r\n      return [\r\n        this.horizontal || this.flexbox ? this.flexbox ? 'masonry-with-flex' : 'masonry-horizontal' : 'masonry-with-columns'\r\n      ];\r\n    },\r\n    masonryStyle() { \r\n      return {\r\n        maxHeight: this.height ? isNaN(this.height) ? this.height : `${this.height}px` : null\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    checkScreenSize() {\r\n      if (window.innerWidth < 600) {\r\n        this.height = null;\r\n      }\r\n      else if (window.innerWidth < 1200) {\r\n        const dimentions = this.$slots.default.filter(el => el.tag).map(img => img.elm.clientWidth);\r\n        const center = Math.floor(dimentions.length/2);\r\n        const firstCol = dimentions.slice(0, center).reduce((a, b) => a + b);\r\n        const secCol = dimentions.slice(center).reduce((a, b) => a + b);\r\n\r\n        this.height = firstCol > secCol ? firstCol : secCol;\r\n      }\r\n      else {\r\n        this.height = this.maxHeight;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.responsive) {\r\n      setTimeout(this.checkScreenSize, 200);\r\n      window.addEventListener(\"resize\", this.checkScreenSize);\r\n    } else {\r\n      this.height = this.maxHeight;\r\n    }\r\n    \r\n    if (!this.horizontal && !this.flexbox) {\r\n      const colHeights = Array(this.numCols).fill(0);\r\n      const masonryWrapper = this.$refs.masonry;\r\n      Array.from(masonryWrapper.children).forEach((child, i) => {\r\n        const order = i % this.numCols;\r\n        child.style.order = order;\r\n        colHeights[order] += parseFloat(child.clientHeight);\r\n      });\r\n      masonryWrapper.style.height = Math.max(...colHeights) + 'px';\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.responsive) {\r\n      window.removeEventListener(\"resize\", this.checkScreenSize);\r\n    }\r\n  }\r\n};\r\n\r\nexport default Masonry;\r\nexport { Masonry as mdbMasonry };\r\n</script>\r\n\r\n<style scoped>\r\n.masonry-with-columns, .masonry-with-flex {\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-box-direction: normal;\r\n  -webkit-flex-direction: column;\r\n  -ms-flex-direction: column;\r\n  flex-direction: column;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap; }\r\n.masonry-horizontal {\r\n  display: flex;\r\n  flex-wrap: wrap; }\r\n.masonry-horizontal div {\r\n  flex: 1 0 auto; }\r\n</style>\r\n"]}]}