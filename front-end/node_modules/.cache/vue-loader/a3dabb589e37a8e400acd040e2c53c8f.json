{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/HR-Admin/Applications.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/HR-Admin/Applications.vue","mtime":1564073301457},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Navbar from \"../Nav\"\nimport Multiselect from 'vue-multiselect'\n\nimport JQuery from 'jquery'\nlet $ = JQuery;\n\nimport ServicesMixin from \"../mixins/services-mixin\";\nimport CommonsMixin from \"../mixins/commons-mixin\";\n\nexport default {\n    name: \"Applications\",\n    mixins: [ServicesMixin, CommonsMixin],\n    components: {\n        Navbar,\n        Multiselect,\n    },\n    data () {\n        return {\n            statusFilter: null,\n            searchedWord: '',\n            jobRequirements: [],\n            applications: [],\n            filteredByStatus: false,\n            applicationStatuses: ['Awaiting', 'Under review', 'Interview', 'Job Offer', 'Accepted'],\n            tableData: {\n                columns: [\n                    {\n                        label: 'Name',\n                        field: 'name',\n                    },\n                    {\n                        label: 'Date',\n                        field: 'date',\n                    },\n                    {\n                        label: 'Compatibility',\n                        field: 'compatibility',\n                    },\n                    {\n                        label: 'Status',\n                        field: 'status',\n                    },\n                    {\n                        label: 'Proceed Application Status',\n                        field: 'changeStatus',\n                    },\n                    {\n                        label: 'Decline application',\n                        field: 'declineApplication'\n                    }\n                ],\n                rows: []\n            }\n        }\n    },\n    methods: {\n        getJobId: function() {\n            const url = window.location.pathname;\n            // return the first url param\n            return url.split(\"/\")[2];\n        },\n        getProfileUrl: function (id) {\n            return '/profile/' + id;\n        },\n        getApplications() {\n            const jobId = this.getJobId();\n            this.getApplicationsForJobPost(jobId).then(response => {\n                this.applications = response;\n                this.fillTable(response);\n            })\n        },\n        fillTable(applications) {\n            let statusButtonId = 0;\n\n            applications.forEach(application => {\n                this.tableData.rows.push({\n                    name: application.candidateLinkedIn.fullName,\n                    candidateId: application.candidateLinkedIn.id,\n                    date: this.parseDateFromDateObject(application.applicationDate),\n                    compatibility: this.calculateJobCompatibility(application.candidateLinkedIn.linkedInSkillSet),\n                    status: application.applicationStatus,\n                    candidateSkillSet: application.candidateLinkedIn.linkedInSkillSet\n                });\n\n                statusButtonId++;\n            });\n        },\n        calculateJobCompatibility (skillSet) {\n            let score = 0;\n\n            this.jobRequirements.forEach(requirement => {\n                const wordsInRequirement = requirement.split(\" \");\n                wordsInRequirement.forEach(word => {\n                    skillSet.forEach(skillObject => {\n                        if (skillObject.skill.toString().toLowerCase() === word.toLowerCase()) {\n                            score++;\n                        }\n                    })\n                });\n            });\n\n            const numberOfRequirements = this.jobRequirements.length;\n            return Math.floor((score / numberOfRequirements) * 100) + \"%\";\n        },\n        proceedApplicationStatus (index) {\n            const application = this.applications[index];\n            const applicationId = application.id;\n            const applicationStatus = application.applicationStatus;\n\n            let nextApplicationStatus = \"\";\n\n            for (let i = 0; i < this.applicationStatuses.length - 1; i++) {\n                if (this.applicationStatuses[i] === applicationStatus) {\n                    nextApplicationStatus = this.applicationStatuses[i + 1];\n                }\n            }\n\n            const nextApplicationStatusUrlified = this.urlifyString(nextApplicationStatus);\n\n            this.updateApplicationStatus(applicationId, nextApplicationStatusUrlified)\n                .then(() => {\n                    this.showSuccessfulUpdateAlert();\n                    this.getApplications();\n                }).catch(error => {\n                    console.error(error);\n                    this.showUpdateFailureAlert();\n            })\n        },\n        showSuccessfulUpdateAlert: function () {\n            this.$swal('Success', 'Application status is succesfully updated' , 'success');\n        },\n        showUpdateFailureAlert: function () {\n            this.$swal('Error', 'An error occurred while updating the application status' , 'error');\n        },\n        rejectApplication: function (index) {\n            const application = this.applications[index];\n            const applicationId = application.id;\n\n            this.updateApplicationStatus(applicationId, \"Declined\")\n                .then(() => {\n                    this.getApplications()\n                })\n        },\n        filterByStatus() {\n            if (this.filteredByStatus) {\n                return this.resetFilter();\n            } else {\n                let filter = this.statusFilter.toUpperCase();\n\n                let table = document.getElementsByClassName(\"table\")[0];\n                let tr = table.getElementsByTagName(\"tr\");\n\n                for (let i = 0; i < tr.length; i++) {\n                    let td = tr[i].getElementsByTagName(\"td\")[3];\n                    if (td) {\n                        let txtValue = td.textContent || td.innerText;\n\n                        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n                            tr[i].style.display = \"\";\n                        } else {\n                            tr[i].style.display = \"none\";\n                        }\n                    }\n                }\n\n                this.filteredByStatus = true;\n            }\n        },\n        resetFilter () {\n            let table = document.getElementsByClassName(\"table\")[0];\n            let tr = table.getElementsByTagName(\"tr\");\n\n            for (let i = 0; i < tr.length; i++) {\n                let td = tr[i].getElementsByTagName(\"td\")[3];\n                if (td) {\n                    tr[i].style.display = \"\";   // make all tds visible\n                }\n            }\n\n            this.filteredByStatus = false;\n        },\n        sortByColumn(columnNumber) {\n            let first, second, numberOfSwitches, i = 0;\n\n            let table = document.getElementsByClassName(\"table\")[0];\n            let switching = true;\n            let shouldSwitch = false;\n            let dir = \"asc\";\n\n            while (switching) {\n                switching = false;\n                var rows = table.getElementsByTagName(\"tr\");\n\n                for (i = 1; i < (rows.length - 1); i++) {\n                    // Start by saying there should be no switching:\n                    shouldSwitch = false;\n                    first = rows[i].getElementsByTagName(\"TD\")[columnNumber];\n                    second = rows[i + 1].getElementsByTagName(\"TD\")[columnNumber];\n                    if (dir === \"asc\") {\n                        if (first.innerHTML.toLowerCase() > second.innerHTML.toLowerCase()) {\n                            // If so, mark as a switch and break the loop:\n                            shouldSwitch = true;\n                            break;\n                        }\n                    } else if (dir === \"desc\") {\n                        if (first.innerHTML.toLowerCase() < second.innerHTML.toLowerCase()) {\n                            shouldSwitch = true;\n                            break;\n                        }\n                    }\n                }\n                if (shouldSwitch) {\n                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n                    switching = true;\n                    numberOfSwitches ++;\n                } else {\n                    if (numberOfSwitches === 0 && dir === \"asc\") {\n                        dir = \"desc\";\n                        switching = true;\n                    }\n                }\n            }\n        },\n        searchTable() {\n            $(document).ready(() => {\n                $(\"#search\").on(\"keyup\", function() {\n                    let value = $(this).val().toLowerCase();\n                    $(\"#table tr\").filter(function() {\n                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)\n                    });\n                });\n            });\n        },\n        fetchRequirements(jobId) {\n            this.getJobRequirements(jobId).then(jobRequirements => {\n                jobRequirements.forEach(jobRequirementsDto => {\n                    this.jobRequirements.push(jobRequirementsDto.requirement)\n                })\n            });\n        }\n    },\n    mounted () {\n        if (!this.$store.getters.hrExpertAuthenticated) {\n            this.$router.push(\"/\");\n        }\n\n        this.fetchRequirements(this.getJobId());\n        this.getApplications();\n    }\n}\n",{"version":3,"sources":["Applications.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Applications.vue","sourceRoot":"src/components/HR-Admin","sourcesContent":["<template>\n    <div class=\"applications\">\n        <Navbar></Navbar>\n        <div class=\"container\">\n            <div class=\"description\">\n                <h1 class=\"title\">Applications</h1>\n                <p class=\"information\">You can search for a skill by using the search bar. Use the dropdown to filter by application status\n                    and click the arrow button to sort by candidate compatibility. Proceed status button takes the application to\n                    the next status (Awaiting -> Under review -> Interview -> Job Offer -> Accepted) </p>\n                <label for=\"search\">Search for a word</label>\n            </div>\n\n            <form class=\"form-inline search-form\">\n                <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control search\" id=\"search\"\n                           placeholder=\"Search\" v-model=\"searchedWord\"\n                           @input=\"searchTable()\" required>\n                </div>\n                <multiselect v-model=\"statusFilter\" :options=\"applicationStatuses\" class=\"multiselect\" @input=\"filterByStatus()\"></multiselect>\n            </form>\n            <div class=\"table-responsive\">\n                <div class=\"card\">\n                    <table class=\"table table-hover\">\n                        <thead class=\"thead-light\">\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\" v-for=\"(col, i) in tableData.columns\" @click=\"sortByColumn(i)\">\n                                {{col.label}}\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody id=\"table\">\n                        <tr v-for=\"(row, i) in tableData.rows\">\n                            <th>{{i + 1}}</th>\n                            <td>\n                                <router-link class=\"candidate-name\"\n                                             :to=\"getProfileUrl(row.candidateId)\">{{row.name}}\n                                </router-link>\n                            </td>\n                            <td>{{row.date}}</td>\n                            <td>{{row.compatibility}}</td>\n                            <td>{{row.status}}</td>\n                            <td>\n                                <button class=\"btn btn-success proceed-button\"\n                                        @click=\"proceedApplicationStatus(i)\">\n                                    Proceed Status\n                                </button>\n                            </td>\n                            <td>\n                                <button class=\"btn btn-danger reject-button\"\n                                        @click=\"rejectApplication(i)\">\n                                    Decline Application\n                                </button>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</template>\n\n<script>\n    import Navbar from \"../Nav\"\n    import Multiselect from 'vue-multiselect'\n\n    import JQuery from 'jquery'\n    let $ = JQuery;\n\n    import ServicesMixin from \"../mixins/services-mixin\";\n    import CommonsMixin from \"../mixins/commons-mixin\";\n\n    export default {\n        name: \"Applications\",\n        mixins: [ServicesMixin, CommonsMixin],\n        components: {\n            Navbar,\n            Multiselect,\n        },\n        data () {\n            return {\n                statusFilter: null,\n                searchedWord: '',\n                jobRequirements: [],\n                applications: [],\n                filteredByStatus: false,\n                applicationStatuses: ['Awaiting', 'Under review', 'Interview', 'Job Offer', 'Accepted'],\n                tableData: {\n                    columns: [\n                        {\n                            label: 'Name',\n                            field: 'name',\n                        },\n                        {\n                            label: 'Date',\n                            field: 'date',\n                        },\n                        {\n                            label: 'Compatibility',\n                            field: 'compatibility',\n                        },\n                        {\n                            label: 'Status',\n                            field: 'status',\n                        },\n                        {\n                            label: 'Proceed Application Status',\n                            field: 'changeStatus',\n                        },\n                        {\n                            label: 'Decline application',\n                            field: 'declineApplication'\n                        }\n                    ],\n                    rows: []\n                }\n            }\n        },\n        methods: {\n            getJobId: function() {\n                const url = window.location.pathname;\n                // return the first url param\n                return url.split(\"/\")[2];\n            },\n            getProfileUrl: function (id) {\n                return '/profile/' + id;\n            },\n            getApplications() {\n                const jobId = this.getJobId();\n                this.getApplicationsForJobPost(jobId).then(response => {\n                    this.applications = response;\n                    this.fillTable(response);\n                })\n            },\n            fillTable(applications) {\n                let statusButtonId = 0;\n\n                applications.forEach(application => {\n                    this.tableData.rows.push({\n                        name: application.candidateLinkedIn.fullName,\n                        candidateId: application.candidateLinkedIn.id,\n                        date: this.parseDateFromDateObject(application.applicationDate),\n                        compatibility: this.calculateJobCompatibility(application.candidateLinkedIn.linkedInSkillSet),\n                        status: application.applicationStatus,\n                        candidateSkillSet: application.candidateLinkedIn.linkedInSkillSet\n                    });\n\n                    statusButtonId++;\n                });\n            },\n            calculateJobCompatibility (skillSet) {\n                let score = 0;\n\n                this.jobRequirements.forEach(requirement => {\n                    const wordsInRequirement = requirement.split(\" \");\n                    wordsInRequirement.forEach(word => {\n                        skillSet.forEach(skillObject => {\n                            if (skillObject.skill.toString().toLowerCase() === word.toLowerCase()) {\n                                score++;\n                            }\n                        })\n                    });\n                });\n\n                const numberOfRequirements = this.jobRequirements.length;\n                return Math.floor((score / numberOfRequirements) * 100) + \"%\";\n            },\n            proceedApplicationStatus (index) {\n                const application = this.applications[index];\n                const applicationId = application.id;\n                const applicationStatus = application.applicationStatus;\n\n                let nextApplicationStatus = \"\";\n\n                for (let i = 0; i < this.applicationStatuses.length - 1; i++) {\n                    if (this.applicationStatuses[i] === applicationStatus) {\n                        nextApplicationStatus = this.applicationStatuses[i + 1];\n                    }\n                }\n\n                const nextApplicationStatusUrlified = this.urlifyString(nextApplicationStatus);\n\n                this.updateApplicationStatus(applicationId, nextApplicationStatusUrlified)\n                    .then(() => {\n                        this.showSuccessfulUpdateAlert();\n                        this.getApplications();\n                    }).catch(error => {\n                        console.error(error);\n                        this.showUpdateFailureAlert();\n                })\n            },\n            showSuccessfulUpdateAlert: function () {\n                this.$swal('Success', 'Application status is succesfully updated' , 'success');\n            },\n            showUpdateFailureAlert: function () {\n                this.$swal('Error', 'An error occurred while updating the application status' , 'error');\n            },\n            rejectApplication: function (index) {\n                const application = this.applications[index];\n                const applicationId = application.id;\n\n                this.updateApplicationStatus(applicationId, \"Declined\")\n                    .then(() => {\n                        this.getApplications()\n                    })\n            },\n            filterByStatus() {\n                if (this.filteredByStatus) {\n                    return this.resetFilter();\n                } else {\n                    let filter = this.statusFilter.toUpperCase();\n\n                    let table = document.getElementsByClassName(\"table\")[0];\n                    let tr = table.getElementsByTagName(\"tr\");\n\n                    for (let i = 0; i < tr.length; i++) {\n                        let td = tr[i].getElementsByTagName(\"td\")[3];\n                        if (td) {\n                            let txtValue = td.textContent || td.innerText;\n\n                            if (txtValue.toUpperCase().indexOf(filter) > -1) {\n                                tr[i].style.display = \"\";\n                            } else {\n                                tr[i].style.display = \"none\";\n                            }\n                        }\n                    }\n\n                    this.filteredByStatus = true;\n                }\n            },\n            resetFilter () {\n                let table = document.getElementsByClassName(\"table\")[0];\n                let tr = table.getElementsByTagName(\"tr\");\n\n                for (let i = 0; i < tr.length; i++) {\n                    let td = tr[i].getElementsByTagName(\"td\")[3];\n                    if (td) {\n                        tr[i].style.display = \"\";   // make all tds visible\n                    }\n                }\n\n                this.filteredByStatus = false;\n            },\n            sortByColumn(columnNumber) {\n                let first, second, numberOfSwitches, i = 0;\n\n                let table = document.getElementsByClassName(\"table\")[0];\n                let switching = true;\n                let shouldSwitch = false;\n                let dir = \"asc\";\n\n                while (switching) {\n                    switching = false;\n                    var rows = table.getElementsByTagName(\"tr\");\n\n                    for (i = 1; i < (rows.length - 1); i++) {\n                        // Start by saying there should be no switching:\n                        shouldSwitch = false;\n                        first = rows[i].getElementsByTagName(\"TD\")[columnNumber];\n                        second = rows[i + 1].getElementsByTagName(\"TD\")[columnNumber];\n                        if (dir === \"asc\") {\n                            if (first.innerHTML.toLowerCase() > second.innerHTML.toLowerCase()) {\n                                // If so, mark as a switch and break the loop:\n                                shouldSwitch = true;\n                                break;\n                            }\n                        } else if (dir === \"desc\") {\n                            if (first.innerHTML.toLowerCase() < second.innerHTML.toLowerCase()) {\n                                shouldSwitch = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (shouldSwitch) {\n                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n                        switching = true;\n                        numberOfSwitches ++;\n                    } else {\n                        if (numberOfSwitches === 0 && dir === \"asc\") {\n                            dir = \"desc\";\n                            switching = true;\n                        }\n                    }\n                }\n            },\n            searchTable() {\n                $(document).ready(() => {\n                    $(\"#search\").on(\"keyup\", function() {\n                        let value = $(this).val().toLowerCase();\n                        $(\"#table tr\").filter(function() {\n                            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)\n                        });\n                    });\n                });\n            },\n            fetchRequirements(jobId) {\n                this.getJobRequirements(jobId).then(jobRequirements => {\n                    jobRequirements.forEach(jobRequirementsDto => {\n                        this.jobRequirements.push(jobRequirementsDto.requirement)\n                    })\n                });\n            }\n        },\n        mounted () {\n            if (!this.$store.getters.hrExpertAuthenticated) {\n                this.$router.push(\"/\");\n            }\n\n            this.fetchRequirements(this.getJobId());\n            this.getApplications();\n        }\n    }\n</script>\n\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>\n\n<style scoped lang=\"scss\">\n    @import \"../../styles/abstracts/typography\";\n\n    * {\n        @include set_font_opensans();\n\n        a, button {\n            text-decoration: none;\n            color: $slightly-blue-white\n        }\n    }\n\n    .applications {\n        height: 100vh;\n    }\n\n    .title {\n        margin-top: 2rem;\n        margin-bottom: 2rem;\n        text-align: center;\n    }\n\n    .search {\n        width: 40vw;\n    }\n\n    .multiselect {\n        margin-left: 10px;\n        width: 12vw;\n    }\n\n    .search-form {\n        margin-bottom: 2rem;\n    }\n\n    .information {\n        margin-bottom: 3rem;\n        font-size: 17px;\n    }\n\n    .proceed-button {\n        margin-left: 20px;\n    }\n\n    table {\n        margin-bottom: 0;\n\n        .candidate-name {\n            color: $slightly-blue-black;\n\n            &:hover {\n                color: #0079B3;\n            }\n        }\n\n        td {\n            color: $slightly-blue-black;\n        }\n    }\n</style>\n"]}]}