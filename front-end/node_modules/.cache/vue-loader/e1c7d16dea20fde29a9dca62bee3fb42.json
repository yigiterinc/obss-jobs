{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/HR-Admin/NewPost.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/HR-Admin/NewPost.vue","mtime":1563790057985},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Navbar from \"../Nav.vue\";\nimport ServicesMixin from \"../mixins/services-mixin\";\nimport CommonsMixin from \"../mixins/commons-mixin\";\n\nexport default {\n    name: \"New-Post\",\n    mixins: [ServicesMixin, CommonsMixin],\n    components: { Navbar },\n    data() {\n        return {\n            title: \"\",\n            location: \"\",\n            imageSource: \"\",\n            description: \"\",\n            activateWhenSubmitted: true,\n            activationDate: \"\",\n            expireDate: \"\",\n            requirements: Array(1)\n        }\n    },\n    methods: {\n        submitJobPost: function () {\n            let success = true;\n\n            if (this.isFormReadyToSubmit()) {\n                const expirationDateFormatted = this.getDateFormatted(this.expireDate);\n                const activationDate = this.activateWhenSubmitted ? this.getCurrentDate() : this.getDateFormatted\n                (this.convertStringToParseableDate(this.activationDate));\n                const urlifiedTitle = this.urlifyString(this.title);\n                let urlifiedDescription = this.urlifyString(this.description);\n\n                const createdBy = this.urlifyString(this.$store.state.hrExpertName);\n\n                if (createdBy != \"\") {\n\n                    this.urlifyRequirements();\n\n                    try {\n                        this.saveJobPost(urlifiedTitle, this.location, this.activateWhenSubmitted,\n                            createdBy, this.imageSource, urlifiedDescription, activationDate, expirationDateFormatted)\n                            .then(response => {\n                                console.log(response.data);\n                                this.requirements.forEach(requirement => {\n                                    try {\n                                        this.saveRequirementForJobPost(response.data, requirement);\n                                    } catch (e) {\n                                        console.error(e);\n                                        success = false;\n                                    }\n                                });\n\n                            })\n                    } catch (e) {\n                        console.error(e);\n                        success = false;\n                    }\n                } else {\n                    this.showEmptyFieldsAlert();\n                }\n\n                if (success) {\n                    this.showAuthorizedAlert()\n                } else {\n                    this.showFailureAlert()\n                }\n            }\n        },\n        getDateFormatted: function (date) {  // @Param: Date in YYYY-MM-DD format and returns in DD-MM-YYYY format\n            if (typeof date !== \"string\")\n                date = date.toString();\n\n            const day = date.split(\"-\")[2];\n            const month = date.split(\"-\")[1];\n            const year = date.split(\"-\")[0];\n\n            return day + \"/\" + month + \"/\" + year;\n        },\n        getCurrentDate: function () {\n            const d = new Date();\n            let day = d.getDay().toString();\n            let month = d.getMonth().toString();\n            let year = d.getFullYear().toString();\n\n            if (parseInt(day) < 10) {\n                day = \"0\" + day;\n            }\n\n            if (parseInt(month) < 10) {\n                month = \"0\" + month;\n            }\n\n            return day + '/' + month + '/' + year;\n        },\n        isFormReadyToSubmit: function () {\n            return this.areAllFieldsFilled() && this.isValidURL(this.imageSource);\n        },\n        showAuthorizedAlert: function () {\n            this.$swal('Saved', 'Job post is successfully saved', 'success');\n        },\n        showEmptyFieldsAlert: function () {\n            this.$swal('Error', 'Please fill the fields before you submit,' +\n                ' all fields must be filled with appropriate input' , 'error');\n        },\n        showFailureAlert: function () {\n            this.$swal('Error', 'An error occurred' , 'error');\n        },\n        areAllFieldsFilled: function () {\n            for (let i = 0; i < this.requirements.length; i++) {\n                if (!this.notEmptyString(this.requirements[i])) // is empty\n                    return false;\n            }\n\n            return this.notEmptyString(this.title) && this.notEmptyString(this.description)\n                    && this.notEmptyString(this.expireDate.toString());\n        },\n        notEmptyString: function (str) {\n            return !(str.length === 0 || !str.trim());\n        },\n        isValidURL: function (url) {\n            let a = document.createElement('a');\n            a.href = url;\n            return (a.host && a.host != window.location.host);\n        },\n        addRequirement: function () {\n            this.requirements.push(\"\");\n        },\n        urlifyRequirements: function () {\n            for (let i = 0; i < this.requirements.length; i++) {\n                this.requirements[i] = this.urlifyString(this.requirements[i]);\n            }\n        }\n    }\n}\n",{"version":3,"sources":["NewPost.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NewPost.vue","sourceRoot":"src/components/HR-Admin","sourcesContent":["<template>\n<div class=\"new-post\">\n    <Navbar></Navbar>\n    <br><br>\n    <div class=\"container title\">\n        <h1>Create a job post</h1>\n        <hr>\n        <br>\n    </div>\n    <form class=\"container\">\n        <div class=\"form-group\">\n            <label for=\"title\">Job Title</label>\n            <input type=\"text\" class=\"form-control\" id=\"title\" placeholder=\"Enter title\" v-model=\"title\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"location\">Location</label>\n            <input type=\"text\" class=\"form-control\" id=\"location\" placeholder=\"Enter location\" v-model=\"location\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"image-source\">Post header image</label>\n            <input type=\"url\" class=\"form-control\"\n                   id=\"image-source\" aria-describedby=\"image-help\"\n                   placeholder=\"Enter url\" v-model=\"imageSource\">\n            <small id=\"image-help\" class=\"form-text text-muted\">Image to display in job post</small>\n        </div>\n\n        <label for=\"job-description\">Job Description</label>\n        <textarea class=\"form-control\" id=\"job-description\" rows=\"3\" v-model=\"description\"></textarea>\n\n        <div class=\"requirements\">\n            <br>\n            <h1 class=\"requirements__title\">Job Requirements</h1>\n            <hr>\n            <br>\n            <p>Enter the desired skills for the job, if you want more requirements,\n                feel free to click add requirements button</p>\n            <div class=\"form-group\" v-for=\"(requirement, i) in requirements\">\n                <br>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Enter requirement\" v-model=\"requirements[i]\" required>\n            </div>\n            <div class=\"options\">\n                <button class=\"btn btn-danger add-button\" v-on:click=\"addRequirement()\">Add requirement</button>\n            </div>\n        </div>\n    </form>\n    <div>\n    <div class=\"bottom-container container\">\n        <div class=\"date-pickers\">\n            <div class=\"activate\">\n                <input type=\"checkbox\" v-model=\"activateWhenSubmitted\"\n                       class=\"form-check-input\" id=\"activate\" checked>\n                <label class=\"form-check-label\" for=\"activate\">Activate when submitted</label>\n            </div>\n            <div class=\"expire-date\">\n                <label for=\"expire-date\">Expire Date</label>\n                <input type=\"date\" name=\"expiredate\" id=\"expire-date\" v-model=\"expireDate\">\n                <button class=\"btn btn-primary submit-button\" v-on:click=\"submitJobPost()\">Submit</button>\n            </div>\n            <div class=\"activation-date\" v-if=\"!activateWhenSubmitted\">\n                <label for=\"activation-date\">Activation Date</label>\n                <input type=\"date\" name=\"activationdate\" id=\"activation-date\" v-model=\"activationDate\">\n            </div>\n        </div>\n    </div>\n\n    </div>\n</div>\n</template>\n\n<script>\n    import Navbar from \"../Nav.vue\";\n    import ServicesMixin from \"../mixins/services-mixin\";\n    import CommonsMixin from \"../mixins/commons-mixin\";\n\n    export default {\n        name: \"New-Post\",\n        mixins: [ServicesMixin, CommonsMixin],\n        components: { Navbar },\n        data() {\n            return {\n                title: \"\",\n                location: \"\",\n                imageSource: \"\",\n                description: \"\",\n                activateWhenSubmitted: true,\n                activationDate: \"\",\n                expireDate: \"\",\n                requirements: Array(1)\n            }\n        },\n        methods: {\n            submitJobPost: function () {\n                let success = true;\n\n                if (this.isFormReadyToSubmit()) {\n                    const expirationDateFormatted = this.getDateFormatted(this.expireDate);\n                    const activationDate = this.activateWhenSubmitted ? this.getCurrentDate() : this.getDateFormatted\n                    (this.convertStringToParseableDate(this.activationDate));\n                    const urlifiedTitle = this.urlifyString(this.title);\n                    let urlifiedDescription = this.urlifyString(this.description);\n\n                    const createdBy = this.urlifyString(this.$store.state.hrExpertName);\n\n                    if (createdBy != \"\") {\n\n                        this.urlifyRequirements();\n\n                        try {\n                            this.saveJobPost(urlifiedTitle, this.location, this.activateWhenSubmitted,\n                                createdBy, this.imageSource, urlifiedDescription, activationDate, expirationDateFormatted)\n                                .then(response => {\n                                    console.log(response.data);\n                                    this.requirements.forEach(requirement => {\n                                        try {\n                                            this.saveRequirementForJobPost(response.data, requirement);\n                                        } catch (e) {\n                                            console.error(e);\n                                            success = false;\n                                        }\n                                    });\n\n                                })\n                        } catch (e) {\n                            console.error(e);\n                            success = false;\n                        }\n                    } else {\n                        this.showEmptyFieldsAlert();\n                    }\n\n                    if (success) {\n                        this.showAuthorizedAlert()\n                    } else {\n                        this.showFailureAlert()\n                    }\n                }\n            },\n            getDateFormatted: function (date) {  // @Param: Date in YYYY-MM-DD format and returns in DD-MM-YYYY format\n                if (typeof date !== \"string\")\n                    date = date.toString();\n\n                const day = date.split(\"-\")[2];\n                const month = date.split(\"-\")[1];\n                const year = date.split(\"-\")[0];\n\n                return day + \"/\" + month + \"/\" + year;\n            },\n            getCurrentDate: function () {\n                const d = new Date();\n                let day = d.getDay().toString();\n                let month = d.getMonth().toString();\n                let year = d.getFullYear().toString();\n\n                if (parseInt(day) < 10) {\n                    day = \"0\" + day;\n                }\n\n                if (parseInt(month) < 10) {\n                    month = \"0\" + month;\n                }\n\n                return day + '/' + month + '/' + year;\n            },\n            isFormReadyToSubmit: function () {\n                return this.areAllFieldsFilled() && this.isValidURL(this.imageSource);\n            },\n            showAuthorizedAlert: function () {\n                this.$swal('Saved', 'Job post is successfully saved', 'success');\n            },\n            showEmptyFieldsAlert: function () {\n                this.$swal('Error', 'Please fill the fields before you submit,' +\n                    ' all fields must be filled with appropriate input' , 'error');\n            },\n            showFailureAlert: function () {\n                this.$swal('Error', 'An error occurred' , 'error');\n            },\n            areAllFieldsFilled: function () {\n                for (let i = 0; i < this.requirements.length; i++) {\n                    if (!this.notEmptyString(this.requirements[i])) // is empty\n                        return false;\n                }\n\n                return this.notEmptyString(this.title) && this.notEmptyString(this.description)\n                        && this.notEmptyString(this.expireDate.toString());\n            },\n            notEmptyString: function (str) {\n                return !(str.length === 0 || !str.trim());\n            },\n            isValidURL: function (url) {\n                let a = document.createElement('a');\n                a.href = url;\n                return (a.host && a.host != window.location.host);\n            },\n            addRequirement: function () {\n                this.requirements.push(\"\");\n            },\n            urlifyRequirements: function () {\n                for (let i = 0; i < this.requirements.length; i++) {\n                    this.requirements[i] = this.urlifyString(this.requirements[i]);\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"scss\">\n    @import '../../styles/abstracts/colors';\n    @import '../../styles/abstracts/typography';\n\n    * {\n        @include set_font_opensans\n    }\n\n    .new-post {\n        color: $slightly-blue-black;\n    }\n\n    form {\n        position: relative;\n    }\n\n    .title {\n        text-align: center;\n\n        h1 {\n            font-weight: 300;\n            font-size: 3rem;\n        }\n    }\n\n    [type=\"date\"] {\n        background:#fff url(https://cdn1.iconfinder.com/data/icons/cc_mono_icon_set/blacks/16x16/calendar_2.png)  97% 50% no-repeat ;\n    }\n\n    [type=\"date\"]::-webkit-inner-spin-button {\n        display: none;\n    }\n\n    [type=\"date\"]::-webkit-calendar-picker-indicator {\n        opacity: 0;\n    }\n\n    .activation-date {\n        float: right;\n        margin-bottom: 1rem;\n    }\n\n    #activation-date {\n        margin-right: 20px;\n        margin-top: 7px;\n    }\n\n    .expire-date {\n        float: right;\n        margin-bottom: 1rem;\n    }\n\n    #expire-date {\n        margin-right: 20px;\n    }\n\n    .btn-primary {\n        background-color: $color-primary-1;\n        border: 0;\n\n        &:hover {\n            background-color: darken($color-primary-1, 10%);\n        }\n    }\n\n    .activate {\n        margin-left: 59vw;\n        margin-top: 2rem;\n        margin-bottom: 1rem;\n    }\n\n    .requirements__title {\n        margin-top: 1rem;\n        text-align: center;\n        font-weight: 300;\n        font-size: 2.5rem;\n    }\n\n    .submit-button {\n        margin-bottom: 5px;\n        padding: 20px;\n    }\n\n    .options {\n        float: left;\n    }\n\n    label {\n        display: block;\n    }\n\n    .add-button {\n        margin-top: 0.5rem;\n        margin-bottom: 3rem;\n    }\n\n    .date-pickers {\n        margin-top: 5rem;\n    }\n\n    input[type=\"date\"] {\n        border: 1px solid #c4c4c4;\n        border-radius: 5px;\n        background-color: #fff;\n        padding: 3px 5px;\n        box-shadow: inset 0 3px 6px rgba(0,0,0,0.1);\n        width: 190px;\n    }\n\n    input[type=\"text\"], input[type=\"url\"] {      // Override bootstrap width\n        width: 77vw !important;\n    }\n</style>\n"]}]}