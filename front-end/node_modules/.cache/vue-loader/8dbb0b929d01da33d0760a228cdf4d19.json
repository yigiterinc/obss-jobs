{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/Job-Details-Page/JobDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/src/components/Job-Details-Page/JobDetails.vue","mtime":1563139807486},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Nav from \"../Nav.vue\";\nimport ServicesMixin from \"../mixins/services-mixin\";\n\nexport default {\n    name: \"JobApply\",\n    mixins: [ServicesMixin],\n    components: {\n        Nav: Nav\n    },\n    data() {\n        return {\n            jobDetails: {},\n            jobRequirements: [],\n            dataFetched: false,\n            userLoggedIn: true,\n            anyContentIsEdited: false,\n            linkedInLogin: \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=86uobfdmclzprd\" +\n                            \"&redirect_uri=http://localhost:8080\" +\n                            \"&state=ASk220aSFAxx&scope=r_liteprofile%20r_emailaddress%20w_member_social\",\n            contentEditableClasses: [\n                { className: 'post__title', edited: false },\n                { className: 'post__description', edited: false },\n                { className: 'expiration_date', edited: false }\n            ]\n        }\n    },\n    computed: {\n        isAuthenticatedUser() {\n            return this.$store.getters.isAuthenticatedUser;\n        },\n        isHrExpert() {\n            return this.$store.getters.isHrExpert;\n        }\n    },\n    methods: {\n        getJobPostId: function () {\n            const url = window.location.pathname;\n            // return the first url param\n            return url.split(\"/\")[2];\n        },\n        isHrExpertUrl: function () {\n            const url = window.location.pathname;\n            return url.split(\"/\")[3] === 'hr';\n        },\n        saveApplication: function () {\n            const userEmail = this.$store.getters.getUserEmail;\n            this.saveApplicationWithEmailAndJobPost(userEmail, this.getJobPostId())\n                .then(response => {\n                    console.log(response);\n                });\n        },\n        submitChanges: function () {\n            const obj = this.contentEditableClasses;\n            const id = this.jobDetails.id;\n\n            const thisReference = this;\n\n            Object.keys(obj).forEach(function(key) {\n                if (obj[key].edited === true) {\n                    const content = document.getElementsByClassName(obj[key].className)[0].innerText;\n                    console.log(content);\n\n                    if (key == 0) {\n                        thisReference.updateJobPostTitle(id, content).then(() => {\n                            console.log('Title updated');\n                        })\n                    } else if (key == 1) {\n                        thisReference.updateJobPostDescriptionWithId(id, content).then(() => {\n                            console.log('Description updated');\n                        })\n                    } else if (key == 2) {\n                        console.log('here');\n                        let date = content.split(\" \")[2];\n                        console.log(date);\n\n                        let year = date.split(\"-\")[0];\n                        let month = date.split(\"-\")[1];\n                        let day = parseInt(date.split(\"-\")[2]) + 1;\n\n                        if (day < 10) {\n                            day = \"0\" + day;\n                        }\n\n                        date = day + \"/\" + month + \"/\" + year;\n                        console.log(date);\n                        thisReference.updateJobPostExpireDateWithId(id, date).then(() => {\n                            console.log('Expire date updated');\n                        })\n                    }\n                }\n            });\n\n            this.jobRequirements.forEach(requirementObject => {\n                if (requirementObject.edited === true) {\n                    const requirementEdited = document.getElementById(requirementObject.id).innerText;\n                    let urlifiedRequirement = requirementEdited.replace(/%20/g, \" \");\n\n                    thisReference.updateJobRequirementWithId(requirementObject.id, urlifiedRequirement).then(() => {\n                        console.log('Requirement Updated');\n                    });\n                }\n            });\n\n            if (this.anyContentIsEdited) {\n                this.showSuccessAlert();\n            } else {\n                this.showNoContentIsEditedAlert()\n            }\n        },\n        saveIfAuthenticated: function () {\n            if (this.isAuthenticatedUser) {\n                this.saveApplication()\n            } else {\n                window.location.href =  this.linkedInLogin;\n            }\n        },\n        changeContentEdited: function (index) {\n            this.contentEditableClasses[index].edited = true;\n            this.anyContentIsEdited = true;\n        },\n        changeRequirementEdited: function(index) {\n            this.jobRequirements[index].edited = true;\n            this.anyContentIsEdited = true;\n        },\n        showSuccessAlert: function () {\n            this.$swal('Saved', 'Your changes are successfully saved', 'success');\n        },\n        showNoContentIsEditedAlert: function () {\n            this.$swal('No edit', 'Content is not edited' , 'warning');\n        },\n        showFailureAlert: function () {\n            this.$swal('Error', 'An error occurred' , 'error');\n        }\n    },\n    mounted() {\n        const jobId = this.getJobPostId();\n\n        this.getJobRequirements(jobId).then(jobRequirements => {\n            jobRequirements.forEach(jobRequirementsDto => {\n                console.log('id', jobId);\n                console.log('dto', jobRequirementsDto);\n                this.jobRequirements.push({\n                    id: jobRequirementsDto.id,\n                    requirement: jobRequirementsDto.requirement,\n                    edited: false\n                });\n            })\n        });\n\n        console.log(this.jobRequirements);\n\n        this.getJobDetails(jobId).then(jobDetails => {\n            this.jobDetails = jobDetails;\n        });\n\n        this.dataFetched = true;\n\n        if (this.isHrExpertUrl()) {\n            this.setContentEditable();\n        }\n    }\n}\n",{"version":3,"sources":["JobDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"JobDetails.vue","sourceRoot":"src/components/Job-Details-Page","sourcesContent":["<template>\n<div>\n    <Nav></Nav>\n    <br>\n    <div class=\"container post\" v-if=\"dataFetched\">\n        <h1 class=\"post__title\" @input=\"changeContentEdited(0)\" :contenteditable=\"isHrExpertUrl()\">{{jobDetails.title}}</h1>\n        <p class=\"post__description\" @input=\"changeContentEdited(1)\" :contenteditable=\"isHrExpertUrl()\">{{jobDetails.description}}</p>\n        <div>\n            <p class=\"invite\"><strong>If you think you satisfy these requirements:</strong></p>\n            <ul v-for=\"(requirementObject, i) in jobRequirements\" class=\"post__requirements\"\n                @input=\"changeRequirementEdited(i)\" :contenteditable=\"isHrExpertUrl()\"\n                :id=\"requirementObject.id\">\n                <li>{{requirementObject.requirement}}</li>\n            </ul>\n            <div class=\"space\"></div>\n            <p><strong>We would like to see you in our team!</strong></p>\n        </div>\n        <div class=\"job-card__bottom-container\" v-if=\"!isHrExpertUrl()\">\n            <b-button type=\"button\" class=\"btn-info post__buttons--button\" v-on:click=\"saveIfAuthenticated()\">\n                Apply\n            </b-button>\n        </div>\n        <div class=\"job-card__bottom-container\" v-else>\n            <b-button type=\"button\"\n                      class=\"btn-danger post__buttons--button\"\n                      v-on:click=\"submitChanges()\">\n                    Save changes\n            </b-button>\n        </div>\n        <div>\n            <p class=\"activation_date\">\n                <em>Activation date: {{jobDetails.activationDate}}</em>\n            </p>\n            <p class=\"expiration_date\" @input=\"changeContentEdited(2)\" :contenteditable=\"isHrExpertUrl()\">\n                <em>Expiration date: {{jobDetails.expirationDate}}</em>\n            </p>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\n    import Nav from \"../Nav.vue\";\n    import ServicesMixin from \"../mixins/services-mixin\";\n\n    export default {\n        name: \"JobApply\",\n        mixins: [ServicesMixin],\n        components: {\n            Nav: Nav\n        },\n        data() {\n            return {\n                jobDetails: {},\n                jobRequirements: [],\n                dataFetched: false,\n                userLoggedIn: true,\n                anyContentIsEdited: false,\n                linkedInLogin: \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=86uobfdmclzprd\" +\n                                \"&redirect_uri=http://localhost:8080\" +\n                                \"&state=ASk220aSFAxx&scope=r_liteprofile%20r_emailaddress%20w_member_social\",\n                contentEditableClasses: [\n                    { className: 'post__title', edited: false },\n                    { className: 'post__description', edited: false },\n                    { className: 'expiration_date', edited: false }\n                ]\n            }\n        },\n        computed: {\n            isAuthenticatedUser() {\n                return this.$store.getters.isAuthenticatedUser;\n            },\n            isHrExpert() {\n                return this.$store.getters.isHrExpert;\n            }\n        },\n        methods: {\n            getJobPostId: function () {\n                const url = window.location.pathname;\n                // return the first url param\n                return url.split(\"/\")[2];\n            },\n            isHrExpertUrl: function () {\n                const url = window.location.pathname;\n                return url.split(\"/\")[3] === 'hr';\n            },\n            saveApplication: function () {\n                const userEmail = this.$store.getters.getUserEmail;\n                this.saveApplicationWithEmailAndJobPost(userEmail, this.getJobPostId())\n                    .then(response => {\n                        console.log(response);\n                    });\n            },\n            submitChanges: function () {\n                const obj = this.contentEditableClasses;\n                const id = this.jobDetails.id;\n\n                const thisReference = this;\n\n                Object.keys(obj).forEach(function(key) {\n                    if (obj[key].edited === true) {\n                        const content = document.getElementsByClassName(obj[key].className)[0].innerText;\n                        console.log(content);\n\n                        if (key == 0) {\n                            thisReference.updateJobPostTitle(id, content).then(() => {\n                                console.log('Title updated');\n                            })\n                        } else if (key == 1) {\n                            thisReference.updateJobPostDescriptionWithId(id, content).then(() => {\n                                console.log('Description updated');\n                            })\n                        } else if (key == 2) {\n                            console.log('here');\n                            let date = content.split(\" \")[2];\n                            console.log(date);\n\n                            let year = date.split(\"-\")[0];\n                            let month = date.split(\"-\")[1];\n                            let day = parseInt(date.split(\"-\")[2]) + 1;\n\n                            if (day < 10) {\n                                day = \"0\" + day;\n                            }\n\n                            date = day + \"/\" + month + \"/\" + year;\n                            console.log(date);\n                            thisReference.updateJobPostExpireDateWithId(id, date).then(() => {\n                                console.log('Expire date updated');\n                            })\n                        }\n                    }\n                });\n\n                this.jobRequirements.forEach(requirementObject => {\n                    if (requirementObject.edited === true) {\n                        const requirementEdited = document.getElementById(requirementObject.id).innerText;\n                        let urlifiedRequirement = requirementEdited.replace(/%20/g, \" \");\n\n                        thisReference.updateJobRequirementWithId(requirementObject.id, urlifiedRequirement).then(() => {\n                            console.log('Requirement Updated');\n                        });\n                    }\n                });\n\n                if (this.anyContentIsEdited) {\n                    this.showSuccessAlert();\n                } else {\n                    this.showNoContentIsEditedAlert()\n                }\n            },\n            saveIfAuthenticated: function () {\n                if (this.isAuthenticatedUser) {\n                    this.saveApplication()\n                } else {\n                    window.location.href =  this.linkedInLogin;\n                }\n            },\n            changeContentEdited: function (index) {\n                this.contentEditableClasses[index].edited = true;\n                this.anyContentIsEdited = true;\n            },\n            changeRequirementEdited: function(index) {\n                this.jobRequirements[index].edited = true;\n                this.anyContentIsEdited = true;\n            },\n            showSuccessAlert: function () {\n                this.$swal('Saved', 'Your changes are successfully saved', 'success');\n            },\n            showNoContentIsEditedAlert: function () {\n                this.$swal('No edit', 'Content is not edited' , 'warning');\n            },\n            showFailureAlert: function () {\n                this.$swal('Error', 'An error occurred' , 'error');\n            }\n        },\n        mounted() {\n            const jobId = this.getJobPostId();\n\n            this.getJobRequirements(jobId).then(jobRequirements => {\n                jobRequirements.forEach(jobRequirementsDto => {\n                    console.log('id', jobId);\n                    console.log('dto', jobRequirementsDto);\n                    this.jobRequirements.push({\n                        id: jobRequirementsDto.id,\n                        requirement: jobRequirementsDto.requirement,\n                        edited: false\n                    });\n                })\n            });\n\n            console.log(this.jobRequirements);\n\n            this.getJobDetails(jobId).then(jobDetails => {\n                this.jobDetails = jobDetails;\n            });\n\n            this.dataFetched = true;\n\n            if (this.isHrExpertUrl()) {\n                this.setContentEditable();\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"scss\">\n    @import '../../styles/abstracts/colors';\n    @import '../../styles/abstracts/typography';\n\n    .post {\n        @include set_font_montserrat;\n        border: 3px solid $color-primary-0;\n        border-radius: 40px;\n        padding: 2rem 2rem 0 2rem;\n    }\n\n    .post__title {\n        font-size: 2.5rem;\n        font-weight: lighter;\n        letter-spacing: 0.1rem;\n        margin-bottom: 2rem;\n        text-align: center;\n    }\n\n    .post__description {\n        margin-bottom: 2rem;\n        letter-spacing: 0.05rem;\n    }\n\n    .job-card__bottom-container {\n        height: 5rem;\n        width: 75vw;\n        position: relative;\n    }\n\n    .post__buttons--button {\n        position: absolute;\n        top: 80%;\n        right: 1rem;\n        padding: 10px 20px 10px 20px;\n        border-radius: 200px;\n\n        &:hover, &:active {\n            transform: scale(1.1) perspective(1px)\n        }\n    }\n\n    .btn-info {\n        background: $color-primary-2 !important;\n    }\n\n    .link {\n        @include remove_link_styles;\n    }\n\n    li {\n        list-style: none;\n        border-bottom: 1px solid #dddddd;\n        padding-top: 1.5rem;\n        margin-top: 0;\n\n        &:hover {\n            background: rgba($color-complement-2, 40%);\n        }\n    }\n\n    .space {\n        height: 2rem;\n    }\n\n    ul {\n        margin-bottom: 0;\n        padding-left: 0;\n    }\n\n    .post__requirements--invite {\n        margin-bottom: 1rem;\n    }\n</style>\n"]}]}