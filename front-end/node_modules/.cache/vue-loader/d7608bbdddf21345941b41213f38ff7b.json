{"remainingRequest":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Components/Tabs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/mdbvue/src/components/Components/Tabs.vue","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/erinc/Documents/WebWorkspace/yigit-erinc/obss-jobs/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport classNames from 'classnames';\r\nimport waves from '../../mixins/waves';\r\nimport { mdbDropdown } from './Dropdown';\r\nimport { mdbDropdownToggle } from './DropdownToggle';\r\nimport { mdbDropdownMenu } from './DropdownMenu';\r\nimport { mdbDropdownItem } from './DropdownItem';\r\nimport { mdbIcon } from '../Content/Fa';\r\n\r\nconst Tabs = {\r\n  components: {\r\n    mdbDropdown,\r\n    mdbDropdownToggle,\r\n    mdbDropdownMenu,\r\n    mdbDropdownItem,\r\n    mdbIcon\r\n  },\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'ul'\r\n    },\r\n    links: {\r\n      type: [String, Array]\r\n    },\r\n    active: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    content: {\r\n      type: [String, Array]\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    pills: {\r\n      type: Boolean\r\n    },\r\n    tabs: {\r\n      type: Boolean\r\n    },\r\n    vertical: {\r\n      type: Boolean\r\n    },\r\n    justify: {\r\n      type: Boolean\r\n    },\r\n    header: {\r\n      type: Boolean\r\n    },\r\n    navClass: {\r\n      type: String\r\n    },\r\n    card: {\r\n      type: Boolean\r\n    },\r\n    zIndex: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    border: {\r\n      type: Boolean\r\n    },\r\n    default: {\r\n      type: Boolean\r\n    },\r\n    fill: {\r\n      type: Boolean\r\n    },\r\n    transitionDuration: {\r\n      type: Number,\r\n      default: 0.3\r\n    },\r\n    transitionStyle: {\r\n      type: String,\r\n      default: \"ease-out\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: this.active,\r\n      tabLinks: []\r\n    };\r\n  },\r\n  computed: {\r\n    filteredLinks() {\r\n      if (typeof this.links === 'string'){\r\n        this.tabLinks.push({text: this.links});\r\n      }\r\n      else {\r\n        this.tabLinks = [...this.links];\r\n      }\r\n      return this.tabLinks.map((link, index) => {\r\n        link.index = index;\r\n        return link;\r\n      }).filter(link => link.index === this.activeTab);\r\n    },\r\n    className() {\r\n      return classNames(\r\n        'nav',\r\n        this.default && 'nav-tabs',\r\n        this.tabs && 'nav-tabs md-tabs',\r\n        this.justify && 'nav-justified',\r\n        this.pills && 'nav-pills md-pills',\r\n        this.fill && 'nav-fill',\r\n        this.vertical && 'flex-column',\r\n        this.pills && this.color ? 'pills-'+this.color : !this.pills && this.color ? 'tabs-'+this.color  : false,\r\n        this.header && 'nav-pills card-header-pills',\r\n        this.navClass\r\n      );\r\n    },\r\n    contentClass() {\r\n      return classNames(\r\n        'tab-content',\r\n        this.card && 'card',\r\n        this.vertical && 'vertical',\r\n        this.border && 'border-right border-bottom border-left rounded-bottom'\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    changeTab(index) {\r\n      this.activeTab = index;\r\n      this.$emit('activeTab', this.activeTab);\r\n    },\r\n    beforeEnter(el) {\r\n      el.style.height = '0';\r\n      el.style.opacity = '0';\r\n    },\r\n    enter(el) {\r\n      el.style.height = el.scrollHeight + 'px';\r\n      el.style.opacity = '1';\r\n      el.style.transition = `${this.transitionDuration}s ${this.transitionStyle}`;\r\n    },\r\n    beforeLeave(el) {\r\n      el.style.height = el.scrollHeight + 'px';\r\n      el.style.opacity = '1';\r\n    },\r\n    leave(el) {\r\n      el.style.height = '0';\r\n      el.style.opacity = '0';\r\n      el.style.transition = `${this.transitionDuration}s ${this.transitionStyle}`;\r\n      \r\n    }\r\n  },\r\n  mixins: [waves]\r\n};\r\n\r\nexport default Tabs;\r\nexport { Tabs as mdbTabs };\r\n",{"version":3,"sources":["Tabs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"Tabs.vue","sourceRoot":"node_modules/mdbvue/src/components/Components","sourcesContent":["<template>\r\n  <div>\r\n    <component :is=\"tag\" :class=\"className\" :style=\"'z-index:' + zIndex\">\r\n      <li v-for=\"(link, index) in tabLinks\" class=\"nav-item\" :key=\"index\">\r\n        <mdb-dropdown v-if=\"link.dropdown\">\r\n          <mdb-dropdown-toggle tag=\"a\" :color=\"color\" slot=\"toggle\" navLink>{{link.text}}</mdb-dropdown-toggle>\r\n          <mdb-dropdown-menu :color=\"color\">\r\n            <div v-for=\"(item, index) in link.dropdownItems\" :key=\"index\">\r\n              <div v-if=\"item.divider\" class=\"dropdown-divider\" />\r\n              <mdb-dropdown-item v-else>{{item.text}}</mdb-dropdown-item>\r\n            </div>\r\n          </mdb-dropdown-menu>\r\n        </mdb-dropdown>\r\n        <a v-else :class=\"['nav-link ripple-parent', index === activeTab && 'active', link.disabled === true && 'disabled']\" href=\"#\" role=\"tab\" @click.prevent=\"changeTab(index)\" @click=\"wave\">\r\n          <mdb-icon v-if=\"link.icon\" :icon=\"link.icon\" :class=\"link.bigIcon ? 'pb-2' : 'pr-1'\" size=\"2x\" />\r\n          <br v-if=\"link.bigIcon\" />\r\n          {{link.text}}\r\n        </a>\r\n      </li>\r\n    </component>\r\n    <div :class=\"contentClass\" :style=\"'z-index:' + (zIndex - 1)\">\r\n      <transition @before-enter=\"beforeEnter\" @enter=\"enter\" @before-leave=\"beforeLeave\" @leave=\"leave\">\r\n        <div class=\"tab-pane\" v-for=\"link in filteredLinks\" :key=\"link.index\">\r\n          <p v-if=\"content\" class=\"p-0 m-0\" v-html=\"content[link.index]\" ref=\"pane\" />\r\n          <slot v-else :name=\"links[link.index].text\"></slot>\r\n        </div>\r\n      </transition>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport classNames from 'classnames';\r\nimport waves from '../../mixins/waves';\r\nimport { mdbDropdown } from './Dropdown';\r\nimport { mdbDropdownToggle } from './DropdownToggle';\r\nimport { mdbDropdownMenu } from './DropdownMenu';\r\nimport { mdbDropdownItem } from './DropdownItem';\r\nimport { mdbIcon } from '../Content/Fa';\r\n\r\nconst Tabs = {\r\n  components: {\r\n    mdbDropdown,\r\n    mdbDropdownToggle,\r\n    mdbDropdownMenu,\r\n    mdbDropdownItem,\r\n    mdbIcon\r\n  },\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: 'ul'\r\n    },\r\n    links: {\r\n      type: [String, Array]\r\n    },\r\n    active: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    content: {\r\n      type: [String, Array]\r\n    },\r\n    color: {\r\n      type: String\r\n    },\r\n    pills: {\r\n      type: Boolean\r\n    },\r\n    tabs: {\r\n      type: Boolean\r\n    },\r\n    vertical: {\r\n      type: Boolean\r\n    },\r\n    justify: {\r\n      type: Boolean\r\n    },\r\n    header: {\r\n      type: Boolean\r\n    },\r\n    navClass: {\r\n      type: String\r\n    },\r\n    card: {\r\n      type: Boolean\r\n    },\r\n    zIndex: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    border: {\r\n      type: Boolean\r\n    },\r\n    default: {\r\n      type: Boolean\r\n    },\r\n    fill: {\r\n      type: Boolean\r\n    },\r\n    transitionDuration: {\r\n      type: Number,\r\n      default: 0.3\r\n    },\r\n    transitionStyle: {\r\n      type: String,\r\n      default: \"ease-out\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: this.active,\r\n      tabLinks: []\r\n    };\r\n  },\r\n  computed: {\r\n    filteredLinks() {\r\n      if (typeof this.links === 'string'){\r\n        this.tabLinks.push({text: this.links});\r\n      }\r\n      else {\r\n        this.tabLinks = [...this.links];\r\n      }\r\n      return this.tabLinks.map((link, index) => {\r\n        link.index = index;\r\n        return link;\r\n      }).filter(link => link.index === this.activeTab);\r\n    },\r\n    className() {\r\n      return classNames(\r\n        'nav',\r\n        this.default && 'nav-tabs',\r\n        this.tabs && 'nav-tabs md-tabs',\r\n        this.justify && 'nav-justified',\r\n        this.pills && 'nav-pills md-pills',\r\n        this.fill && 'nav-fill',\r\n        this.vertical && 'flex-column',\r\n        this.pills && this.color ? 'pills-'+this.color : !this.pills && this.color ? 'tabs-'+this.color  : false,\r\n        this.header && 'nav-pills card-header-pills',\r\n        this.navClass\r\n      );\r\n    },\r\n    contentClass() {\r\n      return classNames(\r\n        'tab-content',\r\n        this.card && 'card',\r\n        this.vertical && 'vertical',\r\n        this.border && 'border-right border-bottom border-left rounded-bottom'\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    changeTab(index) {\r\n      this.activeTab = index;\r\n      this.$emit('activeTab', this.activeTab);\r\n    },\r\n    beforeEnter(el) {\r\n      el.style.height = '0';\r\n      el.style.opacity = '0';\r\n    },\r\n    enter(el) {\r\n      el.style.height = el.scrollHeight + 'px';\r\n      el.style.opacity = '1';\r\n      el.style.transition = `${this.transitionDuration}s ${this.transitionStyle}`;\r\n    },\r\n    beforeLeave(el) {\r\n      el.style.height = el.scrollHeight + 'px';\r\n      el.style.opacity = '1';\r\n    },\r\n    leave(el) {\r\n      el.style.height = '0';\r\n      el.style.opacity = '0';\r\n      el.style.transition = `${this.transitionDuration}s ${this.transitionStyle}`;\r\n      \r\n    }\r\n  },\r\n  mixins: [waves]\r\n};\r\n\r\nexport default Tabs;\r\nexport { Tabs as mdbTabs };\r\n</script>\r\n\r\n<style scoped>\r\n.tab-content>.tab-pane {\r\n  display: block;\r\n  top: 0;\r\n  /* transition: 0.3s ease-out; */\r\n}\r\n</style>\r\n"]}]}